import constants
import unittest
import pymysql
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

CLASS_NAME = "TestCaseAlleleQuery"


class TestCaseAlleleQuery(unittest.TestCase):

    DRIVER=None

    @classmethod
    def setUpClass(cls):

        cls.PASSWORD_TEXTBOX_ID = "password"
        cls.ADD_ALLELE_TYPE_TEXTBOX_ID = "allele_type"
        cls.ADD_ALLELE_SEQ_TEXTBOX_ID = "allele_sequence"
        cls.ADD_ALLELE_SUCCESS_MSG = "Allele submitted successfully!"
        cls.ALLELE_LIST_ALERT_ID = "allele_list_alert"
        cls.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL = "button[type='submit'][value='allele']"
        cls.ALLELE_QUERY_TEXTBOX_IDS = {"penA": "seq0",
                                         "mtrR": "seq1",
                                         "porB": "seq2",
                                         "ponA": "seq3",
                                         "gyrA": "seq4",
                                         "parC": "seq5",
                                         "23S":  "seq6"}
        cls.DELETE_ALLELE_BTN_CSS_SEL = "delete-allele"
        cls.DELETE_ALLELE_ALERT_BTN_ID = "delete-ok"
        cls.DELETE_ALLELE_SUCCESS_MSG = "Allele deleted successfully!"
        cls.ERROR_MODAL_ID = "errorModal"
        cls.HELP_BLOCK_NAME = "help-block"
        cls.NO_SEQS_ENTERED = "No sequences were entered. Please enter at least one sequence."
        cls.SIGN_IN_ALERT_ID = "sign_in_alert"
        cls.SIGN_IN_BTN_NAME = "Sign In"
        cls.SIGN_IN_SUCCESS_VAL = "You have successfully signed in!"
        cls.SIGN_OUT_BTN_NAME = "Sign Out"
        cls.SUBMIT_BTN_CSS_SEL = "button[type='submit']"
        cls.SUBMIT_BTN_ID = "submit"
        cls.USERNAME_TEXTBOX_ID = "username"

        cls.loci_names = ["penA",
                           "mtrR",
                           "porB",
                           "ponA",
                           "gyrA",
                           "parC",
                           "23S"]
        cls.allele_types_populate_db = {"penA": "0.000",
                                         "mtrR": "1",
                                         "porB": "2",
                                         "ponA": "3",
                                         "gyrA": "4",
                                         "parC": "5",
                                         "23S":  "6"}
        cls.allele_types_clear_db = {"penA": "0.000",
                                      "mtrR": "1",
                                      "porB": "2",
                                      "ponA": "3",
                                      "gyrA": "4",
                                      "parC": "5",
                                      "23S":  "6"}
        cls.submitted_seq_full_match = {
            "penA": "1746 / 1746 (100.00%)",
            "mtrR": "703 / 703 (100.00%)",
            "porB": "30 / 30 (100.00%)",
            "ponA": "75 / 75 (100.00%)",
            "gyrA": "264 / 264 (100.00%)",
            "parC": "332 / 332 (100.00%)",
            "23S":  "567 / 567 (100.00%)"
        }
        cls.db_full_match = {
            "penA": "1746 / 1746 (100.00%)",
            "mtrR": "703 / 703 (100.00%)",
            "porB": "30 / 30 (100.00%)",
            "ponA": "75 / 75 (100.00%)",
            "gyrA": "264 / 264 (100.00%)",
            "parC": "332 / 332 (100.00%)",
            "23S":  "567 / 567 (100.00%)"
        }
        cls.submitted_seq_partial_match = {
            "penA": "1711 / 1711 (100.00%)",
            "mtrR": "690 / 690 (100.00%)",
            "porB": "29 / 29 (100.00%)",
            "ponA": "69 / 75 (92.00%)",
            "gyrA": "261 / 265 (98.49%)",
            "parC": "317 / 321 (98.75%)",
            "23S":  "556 / 567 (98.06%)"
        }

        cls.db_partial_match = {
            "penA": "1711 / 1746 (98.00%)",
            "mtrR": "690 / 703 (98.15%)",
            "porB": "29 / 30 (96.67%)",
            "ponA": "69 / 75 (92.00%)",
            "gyrA": "261 / 265 (98.49%)",
            "parC": "317 / 332 (95.48%)",
            "23S":  "556 / 567 (98.06%)"
        }


        cls.sequences = {
                "penA": "ATGTTGATTAAAAGCGAATATAAGCCCCGGATGCTGCCCAAAGAAGAGCAGGTCAAAAAGCCGATGACCAGTAACGGACGGATTAGCTTCGTCCTGATGGCAATGGCGGTCTTGTTTGCCTGTCTGATTGCCCGCGGGCTGTATCTGCAGACGGTAACGTATAACTTTTTGAAAGAACAGGGCGACAACCGGATTGTGCGGACTCAAGCATTGCCGGCTACACGCGGTACGGTTTCGGACCGGAACGGTGCGGTTTTGGCGTTGAGCGCGCCGACGGAGTCCCTGTTTGCCGTGCCTAAAGATATGAAGGAAATGCCGTCTGCCGCCCAATTGGAACGCCTGTCCGAGCTTGTCGATGTGCCGGTCGATGTTTTGAGGAACAAACTCGAACAGAAAGGCAAGTCGTTTATTTGGATCAAGCGGCAGCTCGATCCCAAGGTTGCCGAAGAGGTCAAAGCCTTGGGTTTGGAAAACTTTGTATTTGAAAAAGAATTAAAACGCCATTACCCGATGGGCAACCTGTTTGCACACGTCATCGGATTTACCGATATTGACGGCAAAGGTCAGGAAGGTTTGGAACTTTCGCTTGAAGACAGCCTGTATGGCGAAGACGGCGCGGAAGTTGTTTTGCGGGACCGGCAGGGCAATATTGTGGACAGCTTGGACTCCCCGCGCAATAAAGCACCGCAAAACGGCAAAGACATCATCCTTTCCCTCGATCAGAGGATTCAGACCTTGGCCTATGAAGAGTTGAACAAGGCGGTCGAATACCATCAGGCAAAAGCCGGAACGGTGGTGGTTTTGGATGCCCGCACGGGGGAAATCCTCGCCTTGGCCAATACGCCCGCCTACGATCCCAACAGACCCGGCCGGGCAGACAGCGAACAGCGGCGCAACCGTGCCGTAACCGATATGATCGAACCTGGTTCGGCAATCAAACCGTTCGTGATTGCGAAGGCATTGGATGCGGGCAAAACCGATTTGAACGAACGGCTGAATACGCAGCCTTATAAAATCGGACCGTCTCCCGTGCGCGATACCCATGTTTACCCCTCTTTGGATGTGCGCGGCATTATGCAGAAATCGTCCAACGTCGGCACAAGCAAACTGTCTGCGCGTTTCGGCGCCGAAGAAATGTATGACTTCTATCATGAATTGGGCATCGGTGTGCGTATGCACTCGGGCTTTCCGGGGGAAACTGCAGGTTTGTTGAGAAATTGGCGCAGGTGGCGGCCCATCGAACAGGCGACGATGTCTTTCGGTTACGGTCTGCAATTGAGCCTGCTGCAATTGGCGCGCGCCTATACCGCACTGACGCACGACGGCGTTTTGCTGCCGCTCAGCTTTGAGAAGCAGGCGGTTGCGCCGCAAGGCAAACGCATATTCAAAGAATCGACCGCGCGCGAGGTACGCAATCTGATGGTTTCCGTAACCGAGCCGGGCGGCACCGGTACGGCGGGTGCGGTGGACGGTTTCGATGTCGGCGCTAAAACCGGCACGGCGCGCAAGTTCGTCAACGGGCGTTATGCCGACAACAAACACGTCGCTACCTTTATCGGTTTTGCCCCCGCCAAAAACCCCCGTGTGATTGTGGCGGTAACCATCGACGAACCGACTGCCCACGGCTATTACGGCGGCGTAGTGGCAGGGCCGCCCTTCAAAAAAATTATGGGCGGCAGCCTGAACATCTTGGGCATTTCCCCGACCAAGCCACTGACCGCCGCAGCCGTCAAAACACCGTCTTAA",
                "mtrR": "TTGCACGGATAAAAAGTCTTTTTTTATAATCCGCCCTCGTCAAACCGACCCGAAACGAAAACGCCATTATGAGAAAAACCAAAACCGAAGCCTTGAAAACCAAAGAACACCTGATGCTTGCCGCCTTGGAAACCTTTTACCGCAAAGGGATTGCCCGCACCTCGCTCAACGAAATCGCCCAAGCCGCCGGCGTAACGCGCGGCGCGCTTTATTGGCATTTCAAAAATAAGGAAGACTTGTTCGACGCGCTGTTCCAACGTATCTGCGACGACATCGAAAACTGCATCGCGCAAGATGCCGCAGATGCCGAAGGAGGGTCTTGGGCGGTATTCCGCCACACGCTGCTGCACTTTTTCGAGCGGCTGCAAAGCAACGACATCTACTACAAATTCCACAACATCCTGTTTTTAAAATGCGAACACACGGAGCAAAACGCCGCCGTTATCGCCATTGCCCGCAAGCATCAGGCAATCTGGCGCGAGAAAATTACCGCCGTTTTGACCGAAGCGGTGGAAAATCAGGATTTGGCTGACGATTTGGACAAGGAAACGGCGGTCATCTTCATCAAATCGACGTTGGACGGGCTGATTTGGCGTTGGTTCTCTTCCGGCGAAAGTTTCGATTTGGGCAAAACCGCCCCCCGCGCATCATCGGGATAATGATGGACAACTTGGAAAACCATCCCTGCCTGCGCCGGAAATAA",
                "porB": "AAAAACACCGGCGCCAACGTCAATGCTTGG",
                "ponA": "AAAAACAACGGCGGGCGTTGGGCGGTGGTTCAAGAGCCGTTGCTGCAGGGGGCTTTGGTTTCGCTGGATGCAAAA",
                "gyrA": "ctgtacgcgatgcacgagctgaaaaataactggaatgccgcctacaaaaaatcggcgcgcatcgtcggcgacgtcatcggtaaataccacccccacggcgattccgcagtttacgacaccatcgtccgtatggcgcaaaatttcgctatgcgttatgtgctgatagacggacagggcaacttcggatcggtggacgggcttgccgccgcagccatgcgctataccgaaatccgcatggcgaaaatctcacatgaaatgctggca",
                "parC": "GTTTCAGACGGCCAAAAGCCCGTGCAGCGGCGCATTTTGTTTGCCATGCGCGATATGGGTTTGACGGCGGGGGCGAAGCCGGTGAAATCGGCGCGCGTGGTCGGCGAGATTTTGGGTAAATACCATCCGCACGGCGACAGTTCCGCCTATGAGGCGATGGTGCGCATGGCTCAGGATTTTACCTTGCGCTACCCCTTAATCGACGGCATCGGCAACTTCGGTTCGCGCGACGGCGACGGGGCGGCGGCGATGCGTTACACCGAAGCGCGGCTGACGCCGATTGCGGAATTGCTGTTGTCCGAAATCAATCAGGGGACGGTGGATTTTATGCC",
                "23S": "TAGACGGAAAGACCCCGTGAACCTTTACTGTAGCTTTGCATTGGACTTTGAAGTCACTTGTGTAGGATAGGTGGGAGGCTTGGAAGCAGAGACGCCAGTCTCTGTGGAGTCGTCCTTGAAATACCACCCTGGTGTCTTTGAGGTTCTAACCCAGACCCGTCATCCGGGTCGGGGACCGTGCATGGTAGGCAGTTTGACTGGGGCGGTCTCCTCCCAAAGCGTAACGGAGGAGTTCGAAGGTTACCTAGGTCCGGTCGGAAATCGGACTGATAGTGCAATGGCAAAAGGTAGCTTAACTGCGAGACCGACAAGTCGGGCAGGTGCGAAAGCAGGACATAGTGATCCGGTGGTTCTGTATGGAAGGGCCATCGCTCAACGGATAAAAGGTACTCCGGGGATAACAGGCTGATTCCGCCCAAGAGTTCATATCGACGGCGGAGTTTGGCACCTCGATGTCGGCTCATCACATCCTGGGGCTGTAGTCGGTCCCAAGGGTATGGCTGTTCGCCATTTAAAGTGGTACGTGAGCTGGGTTTAAAACGTCGTGAGACAGTTTGGTCCCTATCT",
        }
        cls.partial_sequences = {
                "penA": "ATAAGCCCCGGATGCTGCCCAAAGAAGAGCAGGTCAAAAAGCCGATGACCAGTAACGGACGGATTAGCTTCGTCCTGATGGCAATGGCGGTCTTGTTTGCCTGTCTGATTGCCCGCGGGCTGTATCTGCAGACGGTAACGTATAACTTTTTGAAAGAACAGGGCGACAACCGGATTGTGCGGACTCAAGCATTGCCGGCTACACGCGGTACGGTTTCGGACCGGAACGGTGCGGTTTTGGCGTTGAGCGCGCCGACGGAGTCCCTGTTTGCCGTGCCTAAAGATATGAAGGAAATGCCGTCTGCCGCCCAATTGGAACGCCTGTCCGAGCTTGTCGATGTGCCGGTCGATGTTTTGAGGAACAAACTCGAACAGAAAGGCAAGTCGTTTATTTGGATCAAGCGGCAGCTCGATCCCAAGGTTGCCGAAGAGGTCAAAGCCTTGGGTTTGGAAAACTTTGTATTTGAAAAAGAATTAAAACGCCATTACCCGATGGGCAACCTGTTTGCACACGTCATCGGATTTACCGATATTGACGGCAAAGGTCAGGAAGGTTTGGAACTTTCGCTTGAAGACAGCCTGTATGGCGAAGACGGCGCGGAAGTTGTTTTGCGGGACCGGCAGGGCAATATTGTGGACAGCTTGGACTCCCCGCGCAATAAAGCACCGCAAAACGGCAAAGACATCATCCTTTCCCTCGATCAGAGGATTCAGACCTTGGCCTATGAAGAGTTGAACAAGGCGGTCGAATACCATCAGGCAAAAGCCGGAACGGTGGTGGTTTTGGATGCCCGCACGGGGGAAATCCTCGCCTTGGCCAATACGCCCGCCTACGATCCCAACAGACCCGGCCGGGCAGACAGCGAACAGCGGCGCAACCGTGCCGTAACCGATATGATCGAACCTGGTTCGGCAATCAAACCGTTCGTGATTGCGAAGGCATTGGATGCGGGCAAAACCGATTTGAACGAACGGCTGAATACGCAGCCTTATAAAATCGGACCGTCTCCCGTGCGCGATACCCATGTTTACCCCTCTTTGGATGTGCGCGGCATTATGCAGAAATCGTCCAACGTCGGCACAAGCAAACTGTCTGCGCGTTTCGGCGCCGAAGAAATGTATGACTTCTATCATGAATTGGGCATCGGTGTGCGTATGCACTCGGGCTTTCCGGGGGAAACTGCAGGTTTGTTGAGAAATTGGCGCAGGTGGCGGCCCATCGAACAGGCGACGATGTCTTTCGGTTACGGTCTGCAATTGAGCCTGCTGCAATTGGCGCGCGCCTATACCGCACTGACGCACGACGGCGTTTTGCTGCCGCTCAGCTTTGAGAAGCAGGCGGTTGCGCCGCAAGGCAAACGCATATTCAAAGAATCGACCGCGCGCGAGGTACGCAATCTGATGGTTTCCGTAACCGAGCCGGGCGGCACCGGTACGGCGGGTGCGGTGGACGGTTTCGATGTCGGCGCTAAAACCGGCACGGCGCGCAAGTTCGTCAACGGGCGTTATGCCGACAACAAACACGTCGCTACCTTTATCGGTTTTGCCCCCGCCAAAAACCCCCGTGTGATTGTGGCGGTAACCATCGACGAACCGACTGCCCACGGCTATTACGGCGGCGTAGTGGCAGGGCCGCCCTTCAAAAAAATTATGGGCGGCAGCCTGAACATCTTGGGCATTTCCCCGACCAAGCCACTGACCGCCGCAGCCGT",
                "mtrR": "AAGTCTTTTTTTATAATCCGCCCTCGTCAAACCGACCCGAAACGAAAACGCCATTATGAGAAAAACCAAAACCGAAGCCTTGAAAACCAAAGAACACCTGATGCTTGCCGCCTTGGAAACCTTTTACCGCAAAGGGATTGCCCGCACCTCGCTCAACGAAATCGCCCAAGCCGCCGGCGTAACGCGCGGCGCGCTTTATTGGCATTTCAAAAATAAGGAAGACTTGTTCGACGCGCTGTTCCAACGTATCTGCGACGACATCGAAAACTGCATCGCGCAAGATGCCGCAGATGCCGAAGGAGGGTCTTGGGCGGTATTCCGCCACACGCTGCTGCACTTTTTCGAGCGGCTGCAAAGCAACGACATCTACTACAAATTCCACAACATCCTGTTTTTAAAATGCGAACACACGGAGCAAAACGCCGCCGTTATCGCCATTGCCCGCAAGCATCAGGCAATCTGGCGCGAGAAAATTACCGCCGTTTTGACCGAAGCGGTGGAAAATCAGGATTTGGCTGACGATTTGGACAAGGAAACGGCGGTCATCTTCATCAAATCGACGTTGGACGGGCTGATTTGGCGTTGGTTCTCTTCCGGCGAAAGTTTCGATTTGGGCAAAACCGCCCCCCGCGCATCATCGGGATAATGATGGACAACTTGGAAAACCATCCCTGCCTGCGCCGGAAATAA",
                "porB": "AAAAACACCGGCGCCAACGTCAATGCTTG",
                "ponA": "AAAAACAACGGCGGGCGTTGGGTTCAAGAGCCGTTGCTGCAGGGGGCTTTGGTTTCGCTGGATGCAAAA",
                "gyrA": "ctgtacgcgatgcagagtctgaaaaataactggaatgccgcctacaaaaaatcggcgcgcatcgtcggcgacgtcatcggtaaataccaccccacggcgattccgcagtttacgacaccatcgtccgtatggcgcaaaattttcgctatgcgttatgtgctgatagacggacagggcaacttcggatcggtggacgggcttgccgccgcagccatgcgctataccgaaatccgcatggcgaaaatctcacatgaaatgctggcta",
                "parC": "ACGGCCAAAAGCCCGTGCAGCGGCGCATTTTGTTTGCCATGCGCGATATGGGTTTGACGGCGGGGCGAAGCCGGTGAAATCGGCGCGCGTGGTCGGCGAGATTTTGGGTAAATACCATCCGCACGGCGtACAGTTCCGCCTATGAGGCGATGGTGCGCATGGCTCAGGATTTTACCTTCGCTACCCCTTAATCGACGGCATCGGCAACTTCGGTTCGCGCGACGGCGACGGGGCGGCGGCGATGCGTTACACCGAAGCGCGGCTGACGCCGATTGCGGtAATTGCTGTTGTCCGAAATCAATCAGGGGACGGTGGATTT",
                "23S":  "TAGACGGAAAGACCCCGTGAACCTTTACTGTAGCTTTGCATTGGACTTTGAAGTCACTTGTGTAGGATAGGTGGGAGGCTTGGAAGCAGAGACGCCAGTCTCTGTGGAGTCGTCCTTGAAATACCACCCTGGTGTCTTTGAGGTTCTAACCCAGACCCGTCATCCGGGTCGGGGACCGTGCATGGTAGGCAGTTTGACTGGGGCGGTCTCCTCCCAAAGCGTAACGGAGGAGTTCGAAGGTTACCTAGGTCCGGTCGGAAATCGGACTGATAGTGCAATGGCAAAAGGTAGCTTAACTGCGAGACCCAGGTGCGAAAGCAGGACATAGTGATCCGGTGGTTCTGTATGGAAGGGCCATCGCTCAACGGATAAAAGGTACTCCGGGGATAACAGGCTGATTCCGCCCAAGAGTTCATATCGACGGCGGAGTTTGGCACCTCGATGTCGGCTCATCACATCCTGGGGCTGTAGTCGGTCCCAAGGGTATGGCTGTTCGCCATTTAAAGTGGTACGTGAGCTGGGTTTAAAACGTCGTGAGACAGTTTGGTCCCTATCTTACGAGAGGACCGGAGTGGACGAA",
        }
        cls.primer_sequences = {
                "penA": "CGGGCAATACCTTTATGGTGGAACATGTTGATTAAAAGCGAATATAAGCCCCGGATGCTGCCCAAAGAAGAGCAGGTCAAAAAGCCGATGACCAGTAACGGACGGATTAGCTTCGTCCTGATGGCAATGGCGGTCTTGTTTGCCTGTCTGATTGCCCGCGGGCTGTATCTGCAGACGGTAACGTATAACTTTTTGAAAGAACAGGGCGACAACCGGATTGTGCGGACTCAAGCATTGCCGGCTACACGCGGTACGGTTTCGGACCGGAACGGTGCGGTTTTGGCGTTGAGCGCGCCGACGGAGTCCCTGTTTGCCGTGCCTAAAGATATGAAGGAAATGCCGTCTGCCGCCCAATTGGAACGCCTGTCCGAGCTTGTCGATGTGCCGGTCGATGTTTTGAGGAACAAACTCGAACAGAAAGGCAAGTCGTTTATTTGGATCAAGCGGCAGCTCGATCCCAAGGTTGCCGAAGAGGTCAAAGCCTTGGGTTTGGAAAACTTTGTATTTGAAAAAGAATTAAAACGCCATTACCCGATGGGCAACCTGTTTGCACACGTCATCGGATTTACCGATATTGACGGCAAAGGTCAGGAAGGTTTGGAACTTTCGCTTGAAGACAGCCTGTATGGCGAAGACGGCGCGGAAGTTGTTTTGCGGGACCGGCAGGGCAATATTGTGGACAGCTTGGACTCCCCGCGCAATAAAGCACCGCAAAACGGCAAAGACATCATCCTTTCCCTCGATCAGAGGATTCAGACCTTGGCCTATGAAGAGTTGAACAAGGCGGTCGAATACCATCAGGCAAAAGCCGGAACGGTGGTGGTTTTGGATGCCCGCACGGGGGAAATCCTCGCCTTGGCCAATACGCCCGCCTACGATCCCAACAGACCCGGCCGGGCAGACAGCGAACAGCGGCGCAACCGTGCCGTAACCGATATGATCGAACCTGGTTCGGCAATCAAACCGTTCGTGATTGCGAAGGCATTGGATGCGGGCAAAACCGATTTGAACGAACGGCTGAATACGCAGCCTTATAAAATCGGACCGTCTCCCGTGCGCGATACCCATGTTTACCCCTCTTTGGATGTGCGCGGCATTATGCAGAAATCGTCCAACGTCGGCACAAGCAAACTGTCTGCGCGTTTCGGCGCCGAAGAAATGTATGACTTCTATCATGAATTGGGCATCGGTGTGCGTATGCACTCGGGCTTTCCGGGGGAAACTGCAGGTTTGTTGAGAAATTGGCGCAGGTGGCGGCCCATCGAACAGGCGACGATGTCTTTCGGTTACGGTCTGCAATTGAGCCTGCTGCAATTGGCGCGCGCCTATACCGCACTGACGCACGACGGCGTTTTGCTGCCGCTCAGCTTTGAGAAGCAGGCGGTTGCGCCGCAAGGCAAACGCATATTCAAAGAATCGACCGCGCGCGAGGTACGCAATCTGATGGTTTCCGTAACCGAGCCGGGCGGCACCGGTACGGCGGGTGCGGTGGACGGTTTCGATGTCGGCGCTAAAACCGGCACGGCGCGCAAGTTCGTCAACGGGCGTTATGCCGACAACAAACACGTCGCTACCTTTATCGGTTTTGCCCCCGCCAAAAACCCCCGTGTGATTGTGGCGGTAACCATCGACGAACCGACTGCCCACGGCTATTACGGCGGCGTAGTGGCAGGGCCGCCCTTCAAAAAAATTATGGGCGGCAGCCTGAACATCTTGGGCATTTCCCCGACCAAGCCACTGACCGCCGCAGCCGTCAAAACACCGTCTTAAAACCTTCCTGACCTTTGCCGTC",
                "mtrR": "AACAGGCATTCTTATTTCAGTTGCACGGATAAAAAGTCTTTTTTTATAATCCGCCCTCGTCAAACCGACCCGAAACGAAAACGCCATTATGAGAAAAACCAAAACCGAAGCCTTGAAAACCAAAGAACACCTGATGCTTGCCGCCTTGGAAACCTTTTACCGCAAAGGGATTGCCCGCACCTCGCTCAACGAAATCGCCCAAGCCGCCGGCGTAACGCGCGGCGCGCTTTATTGGCATTTCAAAAATAAGGAAGACTTGTTCGACGCGCTGTTCCAACGTATCTGCGACGACATCGAAAACTGCATCGCGCAAGATGCCGCAGATGCCGAAGGAGGGTCTTGGGCGGTATTCCGCCACACGCTGCTGCACTTTTTCGAGCGGCTGCAAAGCAACGACATCTACTACAAATTCCACAACATCCTGTTTTTAAAATGCGAACACACGGAGCAAAACGCCGCCGTTATCGCCATTGCCCGCAAGCATCAGGCAATCTGGCGCGAGAAAATTACCGCCGTTTTGACCGAAGCGGTGGAAAATCAGGATTTGGCTGACGATTTGGACAAGGAAACGGCGGTCATCTTCATCAAATCGACGTTGGACGGGCTGATTTGGCGTTGGTTCTCTTCCGGCGAAAGTTTCGATTTGGGCAAAACCGCCCCCCGCGCATCATCGGGATAATGATGGACAACTTGGAAAACCATCCCTGCCTGCGCCGGAAATAATTAGAAGAATGCTTTGTGTC",
                "porB": "CCGGCCTGCTTAAATTTCTTAaaaaacaccggcgccaacgtcaatgcttggTATTAGAATTTGTGGCGCAG",
                "ponA": "AAAAACAACGGCGGGCGTTGGGCGGTGGTTCAAGAGCCGTTGCTGCAGGGGGCTTTGGTTTCGCTGGATGCAAAAAGCCCGGATCGGTTACCATACGTT",
                "gyrA": "ACTGTACGCGATGCACGAGCctgtacgcgatgcacgagctgaaaaataactggaatgccgcctacaaaaaatcggcgcgcatcgtcggcgacgtcatcggtaaataccacccccacggcgattccgcagtttacgacaccatcgtccgtatggcgcaaaatttcgctatgcgttatgtgctgatagacggacagggcaacttcggatcggtggacgggcttgccgccgcagccatgcgctataccgaaatccgcatggcgaaaatctcacatgaaatgctggcaTCTGCCAGCATTTCATGTGAG",
                "parC": "GTTTCAGACGGCCAAAAGCCGTTTCAGACGGCCAAAAGCCCGTGCAGCGGCGCATTTTGTTTGCCATGCGCGATATGGGTTTGACGGCGGGGGCGAAGCCGGTGAAATCGGCGCGCGTGGTCGGCGAGATTTTGGGTAAATACCATCCGCACGGCGACAGTTCCGCCTATGAGGCGATGGTGCGCATGGCTCAGGATTTTACCTTGCGCTACCCCTTAATCGACGGCATCGGCAACTTCGGTTCGCGCGACGGCGACGGGGCGGCGGCGATGCGTTACACCGAAGCGCGGCTGACGCCGATTGCGGAATTGCTGTTGTCCGAAATCAATCAGGGGACGGTGGATTTTATGCCGGCATAAAATCCACCGTCCCC",
                "23S":  "ACGAATGGCGTAACGATGGCCACATAGACGGAAAGACCCCGTGAACCTTTACTGTAGCTTTGCATTGGACTTTGAAGTCACTTGTGTAGGATAGGTGGGAGGCTTGGAAGCAGAGACGCCAGTCTCTGTGGAGTCGTCCTTGAAATACCACCCTGGTGTCTTTGAGGTTCTAACCCAGACCCGTCATCCGGGTCGGGGACCGTGCATGGTAGGCAGTTTGACTGGGGCGGTCTCCTCCCAAAGCGTAACGGAGGAGTTCGAAGGTTACCTAGGTCCGGTCGGAAATCGGACTGATAGTGCAATGGCAAAAGGTAGCTTAACTGCGAGACCGACAAGTCGGGCAGGTGCGAAAGCAGGACATAGTGATCCGGTGGTTCTGTATGGAAGGGCCATCGCTCAACGGATAAAAGGTACTCCGGGGATAACAGGCTGATTCCGCCCAAGAGTTCATATCGACGGCGGAGTTTGGCACCTCGATGTCGGCTCATCACATCCTGGGGCTGTAGTCGGTCCCAAGGGTATGGCTGTTCGCCATTTAAAGTGGTACGTGAGCTGGGTTTAAAACGTCGTGAGACAGTTTGGTCCCTATCT",
        }
        cls.random_sequences = {
                "penA": "TCCGGGCGACATACTTTCTAGCAGGCCTCCACTATCTGAAGGGTTTTCAGCATTATAGTAATTTCAAGGAATTACATAGGTTTGCTTGAAGGGTCAGGCATGCGTATGAACGAACGTCCGGCTAGAGGCTGGGGGGAAACGGTCGAGCGTAAACATAGCATCGAATAGGGCACGATGGTGATGTAGATTTCGTGCAGTCGATTGGCCTATCGTGTATTGTGTATCTAGGTGCAGGCTAATAACTGGCCTAGTAAGCTGAAAATATCCCGTGCGGGGGCCCTGAGTACGATACACCTCCTGAACTACAGCTGCTGGAAGTACTTGCACGACAAGCTATGAGTTACGGGCTAACAGGGAATTAAGAGTTGAGTAACCAAACACCCCTTGTTTTGCCTGCAGGATTGCCGGCGCGTAAATTTTGTACACTACTATATACCCTATCTAGCCCCAATCGAATGTTTCAGGATAGTGCGTATAATCCTATAAATGGGCGAGCTACAAGATTTACACCCGTGGGTCCCACCTAAGCCAGCCGGCGGATTTTCCTATCCGGCTCAATGTGTCTCCATCGAAGTAGAACGCCACGGGCGCACACTCGCATCCGTACGCGTCTCGGCCACGCGTAGAATTCGTTTCCTGCCTAGGTGAGAAATCGGTTGACCGGTCGTTCATAGGCTAGACCTTTAGATCTTTAACTTAAGGACTTAGGGAGGCAAAACAATAACTATCCCGGGTATGTAACCCAGCCACCGCGGGAGTACTACTTACCTCGAGGCCTGGAACCGCCTACTCCTACTCAGAATAACTAGGGCTCGAATTGACCGTCAAGATAGTGCTTTGGCGAAACTAGGCGGACAGAAAGGTATCTACGTTTTGGCACTGGACGTTAAATAGGGGTGCCCAGGCTTATGAACAGTGCCATAATGTTCGCAATGGCGCCCTGTAGACATCAGGGCCTAGTGACTGCATTAGCTGATTGTTAAAGTAAGCTGAATCCATCCCTGGACGTAGGGTGCATCCTGTGTCACACCTAAGGAAGAGATCGTGCAAATTAGGTGAGAACAGGCTGGCCTCTCGTGTGCAAAGTCAATGTCTCGGGATCCTATTCTGTAGCACAGGAGTCGGTCTAACGATGCTGAGACCTTCTCCGCCCTCGGAAGGGATCATTGGTCGTTCGTAGTCCCAATCCTTGGGCCCCTGCTCCTACTATTCGCAGGGACCACCATCCTCAGGGTTGAATGTGAGCTGAAGAACGGGGTTAATCTGGCCCAACATGGGACGCGTGTCACTGCGGGCCGGGCGCCCAATTTAGAGGACAAACTTACAATTTCGGACATCGAAATGCCCATTTTGGCTGGGGACACCGACCCTCTACGTCGAGCGATATAGTAGTATTCGGCCAGGATAACAAATAGCGAAGATTGGCCCGCCCCTCCCCGGCACGGTAGGAGTAAAAAGTTCTAGGCGCAGTATCAAGCAACTTTCTTTTCGAGGCCCAAATCGGGACATTTTCCCATTAGCCTCTCATACCCGTGCCTTGACTCGGTAATCGATACGAGTGTGTCTACCAAGCCTCCCATAAGCTCTTGTTCTATGTGCCACAAATTATTTCATGCTTGCTCGATTTCTTGTTCCTCAATACAACGGTAAGACCCTACGTCGATGAATAAGAAGGCGGTAGTGTAGGGTTTCCCCGCCTACTCTACTCTGGTTCTTGGAGCTGCGCTTTGCACCAATCTTCGCAGTGGTCGG",
                "mtrR": "GGTTGGATTCTGAGGGAATTACGGGGATACATTTTGAGCGTCGGCTAGTCCCACCTGGACAACGCCGGGATAGCCCCTAGAAACGCGGAGATCTCAATGCCGTACACATTCCCTTAATTTCGCCTGATAGACTATATTGCAGCTGTCAGCTCTCCACGGTCTTGTCCCTGGTGACTGCTCAGTGTTAGGGTGCGGACCTTTCGTCCCCTTGCCGTCAATGCACCTTTTCTAACGGCTCGTTGATCGGTCTTGTCTTACCGTAGGCCCTTGTTGGCTGGACGTATAGATTAACCGGGGTATTCAGCTCTCACGTAACCCCTAGCCTCAGGCGCCAAAAGCTTCCTGACAACATCGCTGCATACCTGGGAGTGTTGTGAGAACGGTCGTCACGAATCCTCCATAAAGCGGGTCGAACCCGTCTTCACTTCAATGGGTGCCGTTGCGAGAAGGAGCCCACTCACGGGTGGAACCGAGATTTGCGAGAACACGCTATCGGATCATGGCCACCACCCCAAGAGTGGCCACGAGCTACTGCCGCGACCAATACCGTAAGGGTCTTACTGACCCTATCGGAAATGCATGGTGGGACCTCCTCAAGGATAATCGCACCCTGTATGCGGAGCCCCAGTGATTCGATGTCATGAACTGCCCGACCGCAATAAAGGACCAAGGATCTTTGCCCCTGCACCGATGAACCGTGTATTAGGG",
                "porB": "CATAGAATGTATCTTCCTATGACAATCAGA",
                "ponA": "TGGACAGGGCACTACAATCCGTATGGGAGGACCATACTACGGGACAGTCGTGCTGATGCTCACCCGTGCGGGCGG",
                "gyrA": "CATTTGTGATGATGGAGTGTTACCTATCTACTGGCCCAGCGATATTCGCTGAAATGAAGAGTAGCATACCGAAGGGCGGGAATATTGTCCCTTGGGAGATAGACCTGCTTATTCGCTACGAAATCCACGTGCTGCCATCGTAGTTGGATGCCACCAAGAACCCGGTAGGCCTCAAGGGCAGTTCGTGAGTCGCACCGGTCTTAGGGCCGCAACGCTTTATCGTAACGCTACACAGTAAAGCAAGATAATGAGATTTCCCATTCT",
                "parC": "GAGAGACCATCACGTTCCGTACGCACGGGCTCTCCGCGCGTCTACTGACGCAGTTTTTCCAACTTGGCGGGGTATGCCATATGGGCGAAATGTTGATCACGCGTCCAAGGAACCAGGCGATAGCCGCTAATGCAGCCTTATCGTGTGACTGTAATTTCCACTGACGCTTTCGGAACCCAGTTTACGCGATCCATCTTAAATTGCCTAAGGTAGAGGGCGTCCCTGCGTGTTGATTTCTTCTTTAGGAGATCTACAAAGGACAAAGGACGATACCTATTTTATACTGTTCTCCTCAACTCAGGACGCTAAATCACTGTGAGCTTCTAATGGCA",
                "23S":  "CCACCCAATGCCAACGGGTAATGGCAGGCCTACGAGCTCCACAGTGCGGTATGGGAGTGTTGATGTCACATCATAGCTGGCAAGGGCAATGATGTTAATCAATTGTAAATCGACGCGACATGCTTCAGGTCCGGCTCCCCAAACGTATCGACCGAACACGATCCTAAATCACAGCTGCTGTTGGTGCGCCCGGCGCGTCGCCTATTTCATATAGTCGAGCGTATATGGACGGTTCATATTAAAATGAAGTACAGACAGTGGAGGAACTCTTCCAGTATTATCCGCAGGAGGGCACACCGACCACAGTCCTCTATCACCAGATTTCTCAAAGGTATTCGGGAACAATGCACTAGTTGTGACCCTACACCTACTATAGCGCTAGTCCTGTCCTTCGATCAGAGGTTGTCATTAGCGTTACGACGAATTCTTCGTGGTTTGCCGATGTCGTGGTATTTCGGGGTTCTTTGTTGACGCGCTTAGGGTATTTAAAAGCCCGCATAGTCATAGGAGTAGCCGCTTGTTCAAGTTTATAGTTTTACTATAAGATAACTGATGAAAGGTGCACGCCGGTGTTTC",
        }
        cls.mixed_sequences = {
                "penA": "AGCAGGTCAAAAAGCCGATGACCAGTAACGGACGGATTAGCTTCGTCCTGATGGCAATGGCGGTCTTGTTTGCCTGTCTGATTGCCCGCGGGCTGTATCTGCAGACGGTAACGTATAACTTTTTGAAAGAACAGGGCGACAACCGGATTGTGCGGACTCAAGCATTGCCGGCTACACGCGGTACGGTTTCGGACCGGAACGGTGCGGTTTTGGCGTTGAGCGCGCCGACGGAGTCCCTGTTTGCCGTGCCTAAAGATATGAAGGAAATGCCGTCTGCCGCCCAATTGGAACGCCTGTCCGAGCTTGTCGATGTGCCGGTCGATGTTTTGAGGAACAAACTCGAACAGAAAGGCAAGTCGTTTATTTGGATCAAGCGGCAGCTCGATCCCAAGGTTGCCGAAGAGGTCAAAGCCTTGGGTTTGGAAAACTTTGTATTTGAAAAAGAATTAAAACGCCATTACCCGATGGGCAACCTGTTTGCACACGTCATCGGATTTACCGATATTGACGGCAAAGGTCAGGAAGGTTTGGAACTTTCGCTTGAAGACAGCCTGTATGGCGAAGACGGCGCGGAAGTTGTTTTGCGGGACCGGCAGGGCAATATTGTGGACAGCTTGGACTCCCCGCGCAATAAAGCACCGCAAAACGGCAAAGACATCATCCTTTCCCTCGATCAGAGGATTCAGACCTTGGCCTATGAAGAGTTGAACAAGGCGGTCGAATACCATCAGGCAAAAGCCGGAACGGTGGTGGTTTTGGATGCCCGCACGGGGGAAATCCTCGCCTTGGCCAATACGCCCGCCTACGATCCCAACAGACCCGGCCGGGCAGACAGCGAACAGCGGCGCAACCGTGCCGTAACCGATATGATCGAACCTGGTTCGGCAATCAAACCGTTCGTGATTGCGAAGGCATTGGATGCGGGCAAAACCGATTTGAACGAACGGCTGAATACGCAGCCTTATAAAATCGGACCGTCTCCCGTGCGCGATACCCATGTTTACCCCTCTTTGGATGTGCGCGGCATTATGCAGAAATCGTCCAACGTCGGCACAAGCAAACTGTCTGCGCGTTTCGGCGCCGAAGAAATGTATGACTTCTATCATGAATTGGGCATCGGTGTGCGTATGCACTCGGGCTTTCCGGGGGAAACTGCAGGTTTGTTGAGAAATTGGCGCAGGTGGCGGCCCATCGAACAGGCGACGATGTCTTTCGGTTACGGTCTGCAATTGAGCCTGCTGCAATTGGCGCGCGCCTATACCGCACTGACGCACGACGGCGTTTTGCTGCCGCTCAGCTTTGAGAAGCAGGCGGTTGCGCCGCAAGGCAAACGCATATTCAAAGAATCGACCGCGCGCGAGGTACGCAATCTGATGGTTTCCGTAACCGAGCCGGGCGGCACCGGTACGGCGGGTGCGGTGGACGGTTTCGATGTCGGCGCTAAAACCGGCACGGCGCGCAAGTTCGTCAACGGGCGTTATGCCGACAACAAACACGTCGCTACCTTTATCGGTTTTGCCCCCGCCAAAAACCCCCGTGTGATTGTGGCGGTAACCATCGACGAACCGACTGCCCACGGCTATTACGGCGGCGTAGTGGCAGGGCCGCCCTTCAAAAAAATTATGGGCGGCAGCCTGAACATCTTGGGCATTTCCCCGACCAAGCCACTGACCGCCGCAGC",
                "mtrR": "ACTAGTTTGCGGTGTTGGCTGGTTATTTGGGGCACAATTCGACAGCCGAACATAGGTGCGGAATCGAGGCTGTATCGTATGGAGCGCCCCCTGGTGCGCCACAATCGTTGCGACCTCCAGTTCCGTGCATTTTAACATGACAGCAACACGGAAGCCACGAGAAACGACCTAACAGGAGATTTAGGAGCACAGCTCTACACTGTGCTTGACGTAGAAGCGTGAAGTAGTTAGGAGACCTTTGCGCTTCACTAGACGACTTCCTAAAGTGTACTACAGACTAGGCAGAAGCAGTCTCGACATATGTCACTTGGCTTGTACTTGAATGATGTAGCACGTTCAGGAACTGCAACATACGCTGAGCACAAGTACATCAAAGACGATCAAAGCCTAGAAGATGAAGACTACATTAATGTAGAGGCAATTCGCTTTAAAGCGTAAAGTACCAAGAAGAAGGTTCAGTGCATCGCTATTAATTATCCGCTAACTGCACAACGCTTATAAGATCAGGCCACGCTGATTTGTGGTAGTTTCTACTGCAAATAGTTAATTTATGCGTTTATGAAAGAACTAATTTATGAACCCTCAGGTCTATTTGACTCTCTGTGGCGTTATACGGAGTGTCGAAGTGGGTTCACTCAGCCAATGAACCAGATCTTATACATCGACCACAGCTAGCGGAGTAAGCTGCGTCCCGATGTTAGGGAGAAACT",
                "porB": "aaaaacaccggcgccaacgtcaatgcttgggaatccggcaaatttaccggcaatgtgctg",
                "ponA": "CGCGGTGCGGAAAACTATATGATTTGAGTAAGAGTGAAGATGTCGAGGAGACTGTCAGCCAGTATCTGTCGGGACTCTATACCGTCGATAAAATGGTTCCCGCCGTTGTGTTGGATGTTACTAAAAAGAAAAATGTCGTCATACAGCTGCCCGGCGGCAGGCGGGTTGCGCTTGACAGGCGCGCCTTGGGTTTTGCGGCCCGAaGCGGTCGATAATGAGAAAATGGGGGAGGACCGTATCCGCAGGGGCGCGGTCATCCGTGTCAAAtAACAACGGCGGGCGTTGGGCGGTGGTTCAAGAGCCGTTGCTGCAGGGGGCTTTGGTTTCGCTGGATGCAAAAACCGGAGCTGTGCGCGCGCTGGTCGGCGGTTATGATTTTCACAGCAAAACATTCAATCGTGCGTTCAGGCAATGCGGCAGCCGGGTTCGACCTTTAAGCCGTTTGTCTATTCGGCGGCATTACTAAGGGGATGACCGCGTCCACAGTGGTTAACGATGCGCCGATTTCCCTGCCGGGGAAAGGGCCGAACGGTTCGGTTTGGACACCTAAAAATTCAGACGGCAGATATTCCGGCTACATTACTTTGAGACAGGCTCTGACGGCTTCCAAGAATATGGTTTaCCATCCGTATTTTGATGTCTATCGGTGTCGGTTACGCGCAACAGTATATCCGGCGTTTCGGCTTCAGGCCGTCCGAGCTGCCGGCAAGCCTGTCTATGGCTTTAGGTACGGGCGAGACGACGCCGTTGAAAGTGGCGGAGGCATATAGTGTATTTGCGAACGGCGGATATAGGGTTTCTTCGCACGTGATCGATAAGATTTATGACAGAGACGGCAGGTTGCGCGCCCAAATGCAACCTTTGGTGGCAGGGCAAAATGCGCCTCAGGCAATCGATCCGCGCAATGCCTATATTATGTATAAGATTATGCAGGATGTGGTCCGTGTCGGTACGGCAAGGGGGGCAGCTGCGTTGGGAAGAACGGATATTGCCGGTAAAACGGGTACGACCAACGACAATAAAGATGCGTGGTTTGTCGgGTTTTAACCCTGATGTGGTTACTGCCGTATATATCGGCTTCGACAAACCTAAGAGTAGGGGCGTGCCGGCTACGGCGGTACGATTGCGGTGCCGGTTTGGGTGGACTATATGCGTTTGCGTTGAAAGGAAAGCAGGGCAAAGGGATGAAAATGCCTGAAGGTGTGGTCAGCAGCAATGGCGAATACTATATGAAGGAACGTATGGTAACCGATCCGGGCT",
                "gyrA": "GTACAATCAATGTCAACCCATTTAGTGGGATGCCACTTTTAAATCCACTGGTGTCATTATTGCCATCAGGAAGTGGGCAGAATATTTCGCACTTACGTAAGCGAAAGAGTTCGTATCGGGTAGCTTTCACAATGATCTACGTTGCTTAGTCCAAGACCGTGAGTAGGCCAGTCTCGGCAGTAGTCCGTGCTCCTTGTAGAACGAACCGGACTGTCCTTTTCATTTATTTTTTAGGGGAAATCCGGTAAAGGAGGACAACTTTAC",
                "parC": "agataggggcagatgacGTTTCAGACGGCCAAAAGCCCGTGCAGCGGCGCATTTTGTTTGCCATGCGCGATATGGGTTTGACGGCGGGGGCGAAGCCGGTGAAATCGGCGCGCGTGGTCGGCGAGATTTTGGGTAAATACCATCCGCACGGCGACAGTTCCGCCTATGAGGCGATGGTGCGCATGGCTCAGGATTTTACCTTGCGCTACCCCTTAATCGACGGCATCGGCAACTTCGGTTCGCGCGACGGCGACGGGGCGGCGGCGATGCGTTACACCGAAGCGCGGCTGACGCCGATTGCGGAATTGCTGTTGTCCGAAATCAATCAGGGGACGGTGGATTTTATGCCatagacgattagacgagacgacgtagataaca",
                "23S":  "TAGGTTGCAGATCCGATGTAATGACCAGGATTGTGAAATTCCCACTGCCGGCATTGCATTGGTCATTCCCGATTTTAAAGCTAAGGACAGCTGATGGTACGGGGCGTCGGCGTACTCGTATGTGGAGCTGTACTAAAACATGTAGTGTCTATATGGCGCACGTTCGAATTAGTTGTGCATCTCCGCCACCCCCTCCCCTATTACCATCGAACAGCTAGGGACGAACACCAGATCCGGCAGGGCCCTAAGGGTGTCCGTGGAGTACGAACGAACTACACGTATTCGACCGCACTGCTTACCGGCTTTAAGACCATACGGAACGGGAGTAGATTATTTACGGATATACCTGGCTGCCGATTTGTATCTAACTTGGCAAACTGTCCAACATTTAACAAGGAGGTGGAGTTCAAGATAAGCACCGTATGTCTGACTCGACAGTGAGTGCTCCGAAAGCCGTGCGAAGGATTGTATCCGGTAGTACCTTAATGATCCATGTTGTGGTAACTCGGTATGTTTACAAGGAGACCGGCGGCTGCTGTATTCGGTTGTACGAATGAGAAAAGGTTCTGTGGCGTA",
        }
        cls.full_gene_sequences = {
                "penA": "ATGTTGATTAAAAGCGAATATAAGCCCCGGATGCTGCCCAAAGAAGAGCAGGTCAAAAAGCCGATGACCAGTAACGGACGGATTAGCTTCGTCCTGATGGCAATGGCGGTCTTGTTTGCCTGTCTGATTGCCCGCGGGCTGTATCTGCAGACGGTAACGTATAACTTTTTGAAAGAACAGGGCGACAACCGGATTGTGCGGACTCAAGCATTGCCGGCTACACGCGGTACGGTTTCGGACCGGAACGGTGCGGTTTTGGCGTTGAGCGCGCCGACGGAGTCCCTGTTTGCCGTGCCTAAAGATATGAAGGAAATGCCGTCTGCCGCCCAATTGGAACGCCTGTCCGAGCTTGTCGATGTGCCGGTCGATGTTTTGAGGAACAAACTCGAACAGAAAGGCAAGTCGTTTATTTGGATCAAGCGGCAGCTCGATCCCAAGGTTGCCGAAGAGGTCAAAGCCTTGGGTTTGGAAAACTTTGTATTTGAAAAAGAATTAAAACGCCATTACCCGATGGGCAACCTGTTTGCACACGTCATCGGATTTACCGATATTGACGGCAAAGGTCAGGAAGGTTTGGAACTTTCGCTTGAAGACAGCCTGTATGGCGAAGACGGCGCGGAAGTTGTTTTGCGGGACCGGCAGGGCAATATTGTGGACAGCTTGGACTCCCCGCGCAATAAAGCACCGCAAAACGGCAAAGACATCATCCTTTCCCTCGATCAGAGGATTCAGACCTTGGCCTATGAAGAGTTGAACAAGGCGGTCGAATACCATCAGGCAAAAGCCGGAACGGTGGTGGTTTTGGATGCCCGCACGGGGGAAATCCTCGCCTTGGCCAATACGCCCGCCTACGATCCCAACAGACCCGGCCGGGCAGACAGCGAACAGCGGCGCAACCGTGCCGTAACCGATATGATCGAACCTGGTTCGGCAATCAAACCGTTCGTGATTGCGAAGGCATTGGATGCGGGCAAAACCGATTTGAACGAACGGCTGAATACGCAGCCTTATAAAATCGGACCGTCTCCCGTGCGCGATACCCATGTTTACCCCTCTTTGGATGTGCGCGGCATTATGCAGAAATCGTCCAACGTCGGCACAAGCAAACTGTCTGCGCGTTTCGGCGCCGAAGAAATGTATGACTTCTATCATGAATTGGGCATCGGTGTGCGTATGCACTCGGGCTTTCCGGGGGAAACTGCAGGTTTGTTGAGAAATTGGCGCAGGTGGCGGCCCATCGAACAGGCGACGATGTCTTTCGGTTACGGTCTGCAATTGAGCCTGCTGCAATTGGCGCGCGCCTATACCGCACTGACGCACGACGGCGTTTTGCTGCCGCTCAGCTTTGAGAAGCAGGCGGTTGCGCCGCAAGGCAAACGCATATTCAAAGAATCGACCGCGCGCGAGGTACGCAATCTGATGGTTTCCGTAACCGAGCCGGGCGGCACCGGTACGGCGGGTGCGGTGGACGGTTTCGATGTCGGCGCTAAAACCGGCACGGCGCGCAAGTTCGTCAACGGGCGTTATGCCGACAACAAACACGTCGCTACCTTTATCGGTTTTGCCCCCGCCAAAAACCCCCGTGTGATTGTGGCGGTAACCATCGACGAACCGACTGCCCACGGCTATTACGGCGGCGTAGTGGCAGGGCCGCCCTTCAAAAAAATTATGGGCGGCAGCCTGAACATCTTGGGCATTTCCCCGACCAAGCCACTGACCGCCGCAGCCGTCAAAACACCGTCTTAA",
                "mtrR": "TTGCACGGATAAAAAGTCTTTTTTTATAATCCGCCCTCGTCAAACCGACCCGAAACGAAAACGCCATTATGAGAAAAACCAAAACCGAAGCCTTGAAAACCAAAGAACACCTGATGCTTGCCGCCTTGGAAACCTTTTACCGCAAAGGGATTGCCCGCACCTCGCTCAACGAAATCGCCCAAGCCGCCGGCGTAACGCGCGGCGCGCTTTATTGGCATTTCAAAAATAAGGAAGACTTGTTCGACGCGCTGTTCCAACGTATCTGCGACGACATCGAAAACTGCATCGCGCAAGATGCCGCAGATGCCGAAGGAGGGTCTTGGGCGGTATTCCGCCACACGCTGCTGCACTTTTTCGAGCGGCTGCAAAGCAACGACATCTACTACAAATTCCACAACATCCTGTTTTTAAAATGCGAACACACGGAGCAAAACGCCGCCGTTATCGCCATTGCCCGCAAGCATCAGGCAATCTGGCGCGAGAAAATTACCGCCGTTTTGACCGAAGCGGTGGAAAATCAGGATTTGGCTGACGATTTGGACAAGGAAACGGCGGTCATCTTCATCAAATCGACGTTGGACGGGCTGATTTGGCGTTGGTTCTCTTCCGGCGAAAGTTTCGATTTGGGCAAAACCGCCCCCCGCGCATCATCGGGATAATGATGGACAACTTGGAAAACCATCCCTGCCTGCGCCGGAAATAA",
                "porB": "GATGGCATGGTGATAAGTTCATGTTAGGTAAGGGGACATAGGTACCTCGTCTTGTGGGTTATGGGCCGCTACACCGTGACTGATGGTGCACTTACCCAGTTTGACAAGCCTCGTTAAGGTAGCCGAGCTCATCGACACCTGCGTAGTCATCAAGTCCCTGTTCAAAAGCCAGGTCACGGGGGAACGCTGAAATCTTTTTCTCGATAGATAAAGGAGAACCTCACCTTCTCACAGGGAGTCCCTCTTAACATCACCGGTTACAAATCAAAGCTCCCGTACGCACCAACGAGCGCACCTGTAGCACGTGTCCCTTAATGGGCTCCTTGTAAGTaaaaacaccggcgccaacgtcaatgcttgggaatccggcaaatttaccggcaatgtgctgATCAGATTTGAACTGATAGGACTTAGGGGTTAATTACGTAACCTTGCATAATATAAGACCCGACAAAGTTTTATAGACTGTTTTAAAAGCCCACAACATTAGTAGGGCTAGTTACTTATTTACTGAGTTGGGTCCGGTAACATGGTTGTTTCCTCCCACCACGCGGCAACCCCGCCCTCGTATCGTCTGGACGACGCCGACCGCGGTTAAGTTCTCTCCGGTGAGTATGGCAAGGTCCAGATTTGGCAATTAGCGCACGGAGTCGGCAGCAGTGAAACCATTCGAGGCGCAGAGGTCAAGACTATACAGCTCTTTGGATACTGTGGTCTTACGAATAATATAATTCGGCTGGCTTGCTTCGGCGCGTCCGGTTCTAACATGTCCAATTGCGCATCTCGGGTTCGATCCACCGGGTTCGTAGGAGGCGTCCGAACGGGACGTGGAGGTCTCAGAAAAAAGGAGGGTTACTAAGTTCTCCCGGCAGTTAAATACGCTCGATGCTCCGGCCCTGTTTACTACATGGGGGCATATCAACCTGGATACGCTTTCCTAGAGCGATTGCGGAGGAATCGCAGGGGCTTACCAGCTAGAGGATGATATCTTATGCGCAAGCCTCTTCGCGTTCCAGGCCAAAGCTGAAAGCTATGTCGACTGTGAACTCTGCTGAGGTTTCACCAGCGCATCGAGTGGGCTAAGTCGGCAACATCTCATAAACGCCATGACCTTCCAGGCGGAGGTCGTGGCCTATGGTAAAACCTCGCGTCGCAATAATAGGGAGCGTCCAGAAGCAATCCGGTTGAGCACGCCACGGCGCAGTAGCCTTTCGCGATGTGGGTCTTCCCGACGCAGGTTAAATACCATTGGCCCCAATTTCAACGGCAGTAGTCACCGACCAGTTCGCAGCAGCGATCTTTTAAGGCACGACGGAGTGTGTGATTACAGCACAATACTCCTCTATCTTCTAGGGTTACGTTTGACTTATGGGGAAGGCATGATGATCCCGACGCCTCACGAGCGCTTCGATGTGGGAGCTGAAATGTTGGTTCACCATGTACATAGAGTGACTGAGGGCACCTACCTCTATGGTAACTGTCGACGGAGGCTACTCCAATGACGATGTGACGGTACATCGATACGCTCCAGTGTGAACGATTGCCCAAGGTGCAGATACCACCCGAATGCGTAGGCTTAATGGAAGTCCTTGGAATAAGCCTATGCTCGTGGCTTTTGAGGAACCGATCTGGCGCACGCAGGGGCCGTATTAGGCTGCTTCCTTTATAGAAGTTGATTCGAAGCCATAGAACCGTACGTATATACCGCGCAATCGATGCCATGAGTCAACTGGTGGTGTATCGGGACTC",
                "ponA": "TGCGCAGAAGTAGACGCATCTCCATCGACGTGCCTACCTCGCCTATACTCAGAAGCCCAATGCATATTCGCAGTCGAGCGCCGGGACTCTAGAGATCAAGTGGGCGAACATAAGCTTGCGACTCACCCTGACGCTTCCCGACGATCGTACGGATCAACGCTAGGTTCTGCGGCAGTTACATCACCCTCAGACGTTGCTGCATCGTTCCAATGTACCAGATGATGTGTATACAGGACTTCCCGCGCGGTGCGGAAAACTATATCGATTTGAGTAAGAGTGAAGATGTCGAGGAGACTGTCAGCCAGTATCTGTCGGGACTCTATACCGTCGATAAAATGGTTCCCGCCGTTGTGTTGGATGTTACTAAAAAGAAAAATGTCGTCATACAGCTGCCCGGCGGCAGGCGGGTTGCGCTTGACAGGCGCGCCTTGGGTTTTGCGGCCCGAGCGGTCGATAATGAGAAAATGGGGGAGGACCGTATCCGCAGGGGCGCGGTCATCCGTGTCAAAAACAACGGCGGGCGTTGGGCGGTGGTTCAAGAGCCGTTGCTGCAGGGGGCTTTGGTTTCGCTGGATGCAAAAACCGGAGCTGTGCGCGCGCTGGTCGGCGGTTATGATTTTCACAGCAAAACATTCAATCGTGCCGTTCAGGCAATGCGGCAGCCGGGTTCGACCTTTAAGCCGTTTGTCTATTCGGCGGCATTATCTAAGGGGATGACCGCGTCCACAGTGGTTAACGATGCGCCGATTTCCCTGCCGGGGAAAGGGCCGAACGGTTCGGTTTGGACACCTAAAAATTCAGACGGCAGATATTCCGGCTACATTACTTTGAGACAGGCTCTGACGGCTTCCAAGAATATGGTTTCCATCCGTATTTTGATGTCTATCGGTGTCGGTTACGCGCAACAGTATATCCGGCGTTTCGGCTTCAGGCCGTCCGAGCTGCCGGCAAGCCTGTCTATGGCTTTAGGTACGGGCGAGACGACGCCGTTGAAAGTGGCGGAGGCATATAGTGTATTTGCGAACGGCGGATATAGGGTTTCTTCGCACGTGATCGATAAGATTTATGACAGAGACGGCAGGTTGCGCGCCCAAATGCAACCTTTGGTGGCAGGGCAAAATGCGCCTCAGGCAATCGATCCGCGCAATGCCTATATTATGTATAAGATTATGCAGGATGTGGTCCGTGTCGGTACGGCAAGGGGGGCAGCTGCGTTGGGAAGAACGGATATTGCCGGTAAAACGGGTACGACCAACGACAATAAAGATGCGTGGTTTGTCGGTTTTAACCCTGATGTGGTTACTGCCGTATATATCGGCTTCGACAAACCTAAGAGTATGGGGCGTGCCGGCTACGGCGGTACGATTGCGGTGCCGGTTTGGGTGGACTATATGCGTTTTGCGTTGAAAGGAAAGCAGGGCAAAGGGATGAAAATGCCTGAAGGTGTGGTCAGCAGCAATGGCGAATACTATATGAAGGAACGTATGGTAACCGATCCGGGCTTTCAGCCCCGATGATAACTCAGACTTATCGGGTGCTGATTTCTAAGCACAGCTACCTGTGTGCATTAGACAAGAATTCAACACGAGACGTATAGGTAAGTCGGAGCGAGGGCCTTCTATGGCCTTCTGGGAATAGGCTCGTAGCTTTGTAGCGACGCTGCGTCCACAATGCGGAGGTCCTTGTTCAATCGGCACTGAGTTCCATCGGCGAGGGTGGTGTGTTATTAGCGGTGAACATCTGTTACAAGCTGATACAAGCTTCACACAACTACGTAATCAAAGGGAGAATGGAATCAGCTGGGAACTATATGGTCTGGATGGGGGCGGATAAATCTCAAGGTTCAACCAATCCGAAAGGGCTCTCTGAACTTAACCAAGGGAGAGTGGGCATGGAGAAGCCTATATCCTACGTGCCAAACTCATCAAGTAGGCTAGTTTGAGAATTTCTGAGATTCGTTGCGGTACTCCCCTCGTTTGCTCATAGAAACGACTTAGCCACTCTCTAGGCCATCCAATTTGTGCAAGTCTGGATATACTGTTCTCGATTCGCCGAGACAATCAGGCTGATTTACCGTGCCGGACTGTGATACTTAATGAACCGGCGTTCGTTGGAGACGTAAAGGCTGTTCCAGTGATTTGTGGATCTGGGTCGACATTGTGCTCTGTGACGGGCTTTAATTCTTTGCGGAAATACGTACGTAGATCGCTCGCTAGACTCGTCGCAGGACTCATACCACGCCATCCTTGTCAACGC",
                "gyrA": "TCAACTATGGGCAGGGAATATGGAAATGTTCATGTGTGTCGTCTCTCGACAGCCCTTTTGGGCACCTTTCctgtacgcgatgcacgagctgaaaaataactggaatgccgcctacaaaaaatcggcgcgcatcgtcggcgacgtcatcggtaaataccacccccacggcgattccgcagtttacgacaccatcgtccgtatggcgcaaaatttcgctatgcgttatgtgctgatagacggacagggcaacttcggatcggtggacgggcttgccgccgcagccatgcgctataccgaaatccgcatggcgaaaatctcacatgaaatgctggcaGGCATTAGGTGTATGCAAATATTAGACGACAACATCAATTCCTGACATTGTCCGTCTATCAGGAGAAGTTAAAGCGGTCACACAGC",
                "parC": "TTTGTTCGGGGTTCGCAGCGCTCCTTCTCCGACAGCCAAACGTAAATCGCCCGTGCTCCCGCCACGGCTCGCCTGCTGACAGTATGATGCCAGCGAGGCCTGAACATTTGCGAACTAGATTAGACACGAACACATGCTGACCTGCCAGAAGAGAGCGTGTCATACGCAACTGACATACCGGAGCCCCTAACGCTGCGCGGATGGACCATGTGACACAAACACCAACTCACCACTGCCCCGACCTGTAAGACTTCCCGAAATCTGCCCCCAATTGCGGGAGGCTAGGTCTGGTGCGTGATATGCTCCTAAGGAAAGTCTCATCGTGGACAAGGCCCAAGCCCCCGTCCGGCTGGTGCGTATCCCAATGTTCCTAGAAAGGAGCGGAGAATTACCTCGGCAGTGACAGTATGTATCAGCGATCACAGTTTTTGTTGAGCGGCCTTGTTTCAGACGGCCAAAAGCCCGTGCAGCGGCGCATTTTGTTTGCCATGCGCGATATGGGTTTGACGGCGGGGGCGAAGCCGGTGAAATCGGCGCGCGTGGTCGGCGAGATTTTGGGTAAATACCATCCGCACGGCGACAGTTCCGCCTATGAGGCGATGGTGCGCATGGCTCAGGATTTTACCTTGCGCTACCCCTTAATCGACGGCATCGGCAACTTCGGTTCGCGCGACGGCGACGGGGCGGCGGCGATGCGTTACACCGAAGCGCGGCTGACGCCGATTGCGGAATTGCTGTTGTCCGAAATCAATCAGGGGACGGTGGATTTTATGCCCACGTCACCCCATTCTAGTAACTGTGCATCCTAAGAAATGTGCTGTGCCACCTATTAACAGATATTCGGAAATACCTTAACTGAAAGCGAGCATCCCCGGGACATGCCTTATTGCAAACAAGGGTCAAAACTGACTAATATCCTAATGGTCAGTGTTACCAGCTATATCCCCACCTTGATGGTTGACAGGCCGAATCAATGGGACTCGGCTCGCTGGCACCACAACGACTATAAGCGCGATCTCTGGCGACCGAACTCAACAAATCGCTAGGATTGCGGTCAACCCTTAGGGTAGATGCCAATTCTCCAAGTTGCAAGCCGACAACTGATATTCGGTCATGAACTCGGATGTTTCCACTACTTTATTCGGGGGTCTTGTACACGGCTCAGGACCCGCACATGCACCCGGCAGGACTAGCGGCTACCTAGCGTACAATTTGTGCGACTCCCATAGATGCCCTAAGTTACTAGATCCTGTATACGGTAGTTGTATGGAGATATTATCTGTATAGATCGAGAATATCGACAAACTTGTAAGGCCTTAGTCGGCTAAAGGGTCAACCGACAACTAAATACCATCAGCTCGTGCACGGTCGTACCTTTTAAAACGGCAGGCCACATGCCGAAGCTAACTCCTCTCTGATACGCAACCTCTGTCCTGGACCTTGTTGTTGAGTGGCGACAACTAGTAATCTAAGGTAGAGCCGCAGTATCTGTAGCTCGCGGGGATTGGGTAATGCGCATGATGCCTAACGCGGACCAAGCTACAGGGCTAATGCTCTAGATCCTGAAATCTCTAAACACAGCAGAGACACACACCAAACGGGACTTGAGTGATATTAATTATGTTCCGTCGGCGGGTCAAGTGCTGAAAGACATCTAGGCCTGAGGCTACACTAGATGCAATCGTGACTTATATGGTGCTCACACCTGTGCAGCAAACGCCAGTTAGTGAGCCTCCAACGGTGCTATTTATGTGCCACCGCTTGCAGCTCTAGAAATATGTTGAAACGCGGCTGTGCGGGATACACGCTTCCTAGACCATTGGCCGGCATGGTGTTAAATAGACTTTATTGCAACCTAGTCCTCTTAAACGGTATTGCAGATCCAGTCGTGAAGAGGAGTACAACCTGTTATCTCTGTCCGCCTAATCAGGCCGTAAGTGTCAAAGCTATATTGGAGGAGCTTCAGTGGAGACCTTACTCTAGTGTTTAGTGCTAGGGGCTCCCGCGTTACCCCGCCCACCCCGCTCCTCAGCCCAGCGCATGGTCGGAAGAAAGACAGTTCTCTCCAGCAAATGCGCGCCAAAACGAGGCAGCGTACCGGCGGCTGGACATTGTCCAGCGTCTACACTTCCTGTCCTCCCGAGGGTCGAACGGTCGGTTGCAGGTTACCATCTAGCATTAACGCGCCGAGAAGAGTTAAGGCTCCCGCTAAGGCGACCTTGCAGGAGTGGAGGCGCTACTTGATCCCGAAATTGCAGTAACTGACCTGTCAACTGCAATGCACGCCAACACTCTTTCTGCTTA",
                "23S":  "TAGACGGAAAGACCCCGTGAACCTTTACTGTAGCTTTGCATTGGACTTTGAAGTCACTTGTGTAGGATAGGTGGGAGGCTTGGAAGCAGAGACGCCAGTCTCTGTGGAGTCGTCCTTGAAATACCACCCTGGTGTCTTTGAGGTTCTAACCCAGACCCGTCATCCGGGTCGGGGACCGTGCATGGTAGGCAGTTTGACTGGGGCGGTCTCCTCCCAAAGCGTAACGGAGGAGTTCGAAGGTTACCTAGGTCCGGTCGGAAATCGGACTGATAGTGCAATGGCAAAAGGTAGCTTAACTGCGAGACCGACAAGTCGGGCAGGTGCGAAAGCAGGACATAGTGATCCGGTGGTTCTGTATGGAAGGGCCATCGCTCAACGGATAAAAGGTACTCCGGGGATAACAGGCTGATTCCGCCCAAGAGTTCATATCGACGGCGGAGTTTGGCACCTCGATGTCGGCTCATCACATCCTGGGGCTGTAGTCGGTCCCAAGGGTATGGCTGTTCGCCATTTAAAGTGGTACGTGAGCTGGGTTTAAAACGTCGTGAGACAGTTTGGTCCCTATCT",
        }
        cls.full_gene_partial_sequences = {
                "penA": "ATGTTGATTAAAAGCGAATATAAGCCCCGGATGCTGCCCAAAGAAGAGCAGGTCAAAAAGCCGATGACCAGTAACGGACGGATTAGCTTCGTCCTGATGGCAATGGCGGTCTTGTTTGCCTGTCTGATTGCCCGCGGGCTGTATCTGCAGACGGTAACGTATAACTTTTTGAAAGAACAGGGCGACAACCGGATTGTGCGGACTCAAGCATTGCCGGCTACACGCGGTACGGTTTCGGACCGGAACGGTGCGTTTTGGCGTTGAGCGCGCCGACGGAGTCCCTGTTTGCCGTGCCTAAAGATATGAAGGAAATGCCGTCaTGCCGCCCAATGGAACGCCTGTCCGAGCTTGTCtGATGTGCCGGTCGATGTTTTGAGGAACAAACTCGAACAGAAAGGCAAGTCGTTTATTTGGATCAAGCGGCAGCTCGATCCCAAGGTTGCCGAAGAGGTCAAAGCCTTGGGTTTGGAAAACTTTGTATTTGAAAAAGAATTAAAACGCCATTACCCGATGGGCAACCTGTTTGCACACGTCATCGGATTTACCGATATTGACGGCAAAGGTCAGGAAGGTTTGGAACTTTCGCTTGAAGACAGCCTGTATGGCGAAGACGGCGCGGAAGTTGTTTTGCGGGACCGGCAGGGCAATATTGTGGACAGCTTGGACTCCCCGCGCAATAAAGCACCGCAAAACGGCAAAGACATCATCCTTTCCCTCGATCAGAGGATTCAGACCTTGGCCTATGAAGAGTTGAACAAGGCGGTCGAATACCATCAGGCAAAAGCCGGAACGGTGGTGGTTTTGGATGCCCGCACGGGGGAAATCCTCGCCTTGGCCAATACGCCCGCCTACGATCCCAACAGACCCGGCCGGGCAGACAGCGAACAGCGGCGCAACCGTGCCGTAACCGATATGATCGAACCTGGTTCGGCAATCAAACCGTTCGTGATTGCGAAGGCATTGGATGCGGGCAAAACCGATTTGAACGAACGGCTGAATACGCAGCCTTATAAAATCGGACCGTCTCCCGTGCGCGATACCCATGTTTACCCCTCTTTGGATGTGCGCGGCATTATGCAGAAATCGTCCAACGTCGGCACAAGCAAACTGTCTGCGCGTTTCGGCGCCGAAGAAATGTATGACTTCTATCATGAATTGGGCATCGGTGTGCGTATGCACTCGGGCTTTCCGGGGGAAACTGCAGGTTTGTTGAGAAATTGGCGCAGGTGGCGGCCCATCGAACAGGCGACGATGTCTTTCGGTTACGGTCTGCAATTGAGCCTGCTGCAATTGGCGCGCGCCTATACCGCACTGACGCACGACGGCGTTTTGCTGCCGCTCAGCTTTGAGAAGCAGGCGGTTGCGCCGCAAGGCAAACGCATATTCAAAGAATCGACCGCGCGCGAGGTACGCAATCTGATGGTTTCCGTAACCGAGCCGGGCGGCACCGGTACGGCGGGTGCGGTGGACGGTTTCGATGTCGGCGCTAAAACCGGCACGGCGCGCAAGTTCGTCAACGGGCGTTATGCCGACAACAAACACGTCGCTACCTTTATCGGTTTTGCCCCCGCCAAAAACCCCCGTGTGATTGTGGCGGTAACCATCGACGAACCGACTGCCCACGGCTATTACGGCGGCGTAGTGGCAGGGCCGCCCTTCAAAAAAATTATGGGCGGCAGCCTGAACATCTTGGGCATTTCCCCGACCAAGCCACTGACCGCCGCAGCCGTCAAAACACCGTCTTAA",
                "mtrR": "TTGCACGGATAAAAAGTCTTTTTTTATAATCCGCCCTCGTCAAACCGACCCGAAACGAAAACGCCATTATGAGAAAAACCAAAACCGAAGCCTTGAAAACCAAAGAACACCTGATGCTTGCCGCCTTGGAAACCTTTTACCtaGCAAAGGGATTGCCCGCACCTaCGCTCAACGAAATCGCCCAAGCCGCCGGCGTAACGCGCGGCGCGCTTTATTGGCATTTCAAAAATAAGGaAAGACTTGTTCGACGCGCTGTTCCAaACGTATCTGCGACGACATCGAAAACTGCATCGCGCAAGATGCCGCAGATGCCGAAGGAGGGTCTTGGGCGGTATTCCGCCACACGCTGCTGCACTTTTTCGAGCGGCTGCAAAGCAACGACATCTACTACAAATTCCACAACATCCTGTTTTTAAAATGCGAACACACGGAGCAAAACGCCGCCGTTATCGCCATTGCCCGCAAGCATCAGGCAATCTGGCGCGAGAAAATTACCGCCGTTTTGACCGAAGCGGTGGAAAATCAGGATTTGGCTGACGATTTGGACAAGGAAACGGCGGTCATCTTCATCAAATCGACGTTGGACGGGCTGATTTGGCGTTGGTTCTCTTCCGGCGAAAGTTTCGATTTGGGCAAAACCGCCCCCCGCGCATCATCGGGATAATGATGGACAACTTGGAAAACCATCCCTGCCTGCGCCGGAAATAA",
                "porB": "GATGGCATGGTGATAAGTTCATGTTAGGTAAGGGGACATAGGTACCTCGTCTTGTGGGTTATGGGCCGCTACACCGTGACTGATGGTGCACTTACCCAGTTTGACAAGCCTCGTTAAGGTAGCCGAGCTCATCGACACCTGCGTAGTCATCAAGTCCCTGTTCAAAAGCCAGGTCACGGGGGAACGCTGAAATCTTTTTCTCGATAGATAAAGGAGAACCTCACCTTCTCACAGGGAGTCCCTCTTAACATCACCGGTTACAAATCAAAGCTCCCGTACGCACCAACGAGCGCACCTGTAGCACGTGTCCCTTAATGGGCTCCTTGTAAGTaaaaacaccggcgccaacgtcaatgcttaatccggcaaatttaccggcaatgtgctgATCAGATTTGAACTGATAGGACTTAGGGGTTAATTACGTAACCTTGCATAATATAAGACCCGACAAAGTTTTATAGACTGTTTTAAAAGCCCACAACATTAGTAGGGCTAGTTACTTATTTACTGAGTTGGGTCCGGTAACATGGTTGTTTCCTCCCACCACGCGGCAACCCCGCCCTCGTATCGTCTGGACGACGCCGACCGCGGTTAAGTTCTCTCCGGTGAGTATGGCAAGGTCCAGATTTGGCAATTAGCGCACGGAGTCGGCAGCAGTGAAACCATTCGAGGCGCAGAGGTCAAGACTATACAGCTCTTTGGATACTGTGGTCTTACGAATAATATAATTCGGCTGGCTTGCTTCGGCGCGTCCGGTTCTAACATGTCCAATTGCGCATCTCGGGTTCGATCCACCGGGTTCGTAGGAGGCGTCCGAACGGGACGTGGAGGTCTCAGAAAAAAGGAGGGTTACTAAGTTCTCCCGGCAGTTAAATACGCTCGATGCTCCGGCCCTGTTTACTACATGGGGGCATATCAACCTGGATACGCTTTCCTAGAGCGATTGCGGAGGAATCGCAGGGGCTTACCAGCTAGAGGATGATATCTTATGCGCAAGCCTCTTCGCGTTCCAGGCCAAAGCTGAAAGCTATGTCGACTGTGAACTCTGCTGAGGTTTCACCAGCGCATCGAGTGGGCTAAGTCGGCAACATCTCATAAACGCCATGACCTTCCAGGCGGAGGTCGTGGCCTATGGTAAAACCTCGCGTCGCAATAATAGGGAGCGTCCAGAAGCAATCCGGTTGAGCACGCCACGGCGCAGTAGCCTTTCGCGATGTGGGTCTTCCCGACGCAGGTTAAATACCATTGGCCCCAATTTCAACGGCAGTAGTCACCGACCAGTTCGCAGCAGCGATCTTTTAAGGCACGACGGAGTGTGTGATTACAGCACAATACTCCTCTATCTTCTAGGGTTACGTTTGACTTATGGGGAAGGCATGATGATCCCGACGCCTCACGAGCGCTTCGATGTGGGAGCTGAAATGTTGGTTCACCATGTACATAGAGTGACTGAGGGCACCTACCTCTATGGTAACTGTCGACGGAGGCTACTCCAATGACGATGTGACGGTACATCGATACGCTCCAGTGTGAACGATTGCCCAAGGTGCAGATACCACCCGAATGCGTAGGCTTAATGGAAGTCCTTGGAATAAGCCTATGCTCGTGGCTTTTGAGGAACCGATCTGGCGCACGCAGGGGCCGTATTAGGCTGCTTCCTTTATAGAAGTTGATTCGAAGCCATAGAACCGTACGTATATACCGCGCAATCGATGCCATGAGTCAACTGGTGGTGTATCGGGACTC",
                "ponA": "TGCGCAGAAGTAGACGCATCTCCATCGACGTGCCTACCTCGCCTATACTCAGAAGCCCAATGCATATTCGCAGTCGAGCGCCGGGACTCTAGAGATCAAGTGGGCGAACATAAGCTTGCGACTCACCCTGACGCTTCCCGACGATCGTACGGATCAACGCTAGGTTCTGCGGCAGTTACATCACCCTCAGACGTTGCTGCATCGTTCCAATGTACCAGATGATGTGTATACAGGACTTCCCGCGCGGTGCGGAAAACTATATtCGATTTGAGTAAGAGTGAAGATGTCGAGGAGACTGTCAGCCAGTATCTGTCGGGACTCTATACCGTCGATAAAATGGTTCCCaGCCGTTGTGTTGGATGTTACTAAAAAGAAAAATGTCGTCATACAGCTGCCCGGCGGCAGGCGGGTcTGCGCTTGACAGGCGCGCCTTGGGTTTTGCGGCCCGAGCGGTCGATgAATGAGAAAATGGGGGAGGACCGTATCCGCAGGGGCGCGGTCATCCGTGTCAAAAACAACGGCGGGCGTTGGGCGtGTGGTTCAAGAGCCGTTGCTGCAGGGGGCTTTGGTTTCGCTGGATGCAAAAACCGGAGCTGTGCGCGCGCTGGTCGGCGGTTATGATTTTCACAGCAAAACATTCAATCGTGCCGTTCAGGCAATGCGGCAGCCGGGTTCGACCTTTAAGCCGTTTGTCTATTCGGCGGCATTATCTAAGGGGATGACCaGCGTCCACAGTGGTTAACGATGCGCCGATTTCCCTGCCGGGGAAAGGGCCGAACGGTTCGGTTTGGACACCTAAAAATTCAGACGGCAGATATTCCGGCTACATTACTTTGAGACAGGCTCTGACGGCTTCCAAGAATATGGTTTCCATCCGTATTTTGATGTCTATCGGTGTCGGTTACGCGCAACAGTATATCCGGCGTTTCGGCTTCAGGCCGTCCGAGCTGCCGGCAAGCCTGTCTATGGCTTTAGGTACGGGCGAGACGACGCCGTTGAAAGTGGCGGAGGCATATAGTGTATTTGCGAACGGCGGATATAGGGTTTCTTCGCACGTGATCGATAAGATTTATGACAGAGACGGCAGGTTGCGCGCCCAAATGCAACCTTTGGTGGCAGGGCAAAATGCGCCTCAGGCAATCGATCCGCGCAATGCCTATATTATGTATAAGATTATGCAGGATGTGGTCCGTGTCGGTACGGCAAGGGGGGCAGCTGCGTTGGGAAGAACGGATATTGCCGGTAAAACGGGTACGACCAACGACAATAAAGATGCGTGGTTTGTCGGTTTTAACCCTGATGTGGTTACTGCCGTATATATCGGCTTCGACAAACCTAAGAGTATGGGGCGTGCCGGCTACGGCGGTACGATTGCGGTGCCGGTTTGGGTGGACTATATGCGTTTTGCGTTGAAAGGAAAGCAGGGCAAAGGGATGAAAATGCCTGAAGGTGTGGTCAGCAGCAATGGCGAATACTATATGAAGGAACGTATGGTAACCGATCCGGGCTTTCAGCCCCGATGATAACTCAGACTTATCGGGTGCTGATTTCTAAGCACAGCTACCTGTGTGCATTAGACAAGAATTCAACACGAGACGTATAGGTAAGTCGGAGCGAGGGCCTTCTATGGCCTTCTGGGAATAGGCTCGTAGCTTTGTAGCGACGCTGCGTCCACAATGCGGAGGTCCTTGTTCAATCGGCACTGAGTTCCATCGGCGAGGGTGGTGTGTTATTAGCGGTGAACATCTGTTACAAGCTGATACAAGCTTCACACAACTACGTAATCAAAGGGAGAATGGAATCAGCTGGGAACTATATGGTCTGGATGGGGGCGGATAAATCTCAAGGTTCAACCAATCCGAAAGGGCTCTCTGAACTTAACCAAGGGAGAGTGGGCATGGAGAAGCCTATATCCTACGTGCCAAACTCATCAAGTAGGCTAGTTTGAGAATTTCTGAGATTCGTTGCGGTACTCCCCTCGTTTGCTCATAGAAACGACTTAGCCACTCTCTAGGCCATCCAATTTGTGCAAGTCTGGATATACTGTTCTCGATTCGCCGAGACAATCAGGCTGATTTACCGTGCCGGACTGTGATACTTAATGAACCGGCGTTCGTTGGAGACGTAAAGGCTGTTCCAGTGATTTGTGGATCTGGGTCGACATTGTGCTCTGTGACGGGCTTTAATTCTTTGCGGAAATACGTACGTAGATCGCTCGCTAGACTCGTCGCAGGACTCATACCACGCCATCCTTGTCAACGC",
                "gyrA": "TCAACTATGGGCAGGGAATATGGAAATGTTCATGTGTGTCGTCTCTCGACAGCCCTTTTGGGCACCTTTCctgtacgcgatgcacgagctgaaaaataactggaatgccgcctacaaaaaaatcggcgcgcatcgtcggcgacgtcatcggataaataccacccccacggcgaattccgcagttttacgacaccatcgtccgtatggcgcaaaatttcgctatgcgttatgtgctgatagacggacagggcaacttcggatcggtggacggggcttgccgccgcagccatgcgctataccgaaatccgcatggcgaaaagtctcacatgaaatgctggcaGGCATTAGGTGTATGCAAATATTAGACGACAACATCAATTCCTGACATTGTCCGTCTATCAGGAGAAGTTAAAGCGGTCACACAGC",
                "parC": "TTTGTTCGGGGTTCGCAGCGCTCCTTCTCCGACAGCCAAACGTAAATCGCCCGTGCTCCCGCCACGGCTCGCCTGCTGACAGTATGATGCCAGCGAGGCCTGAACATTTGCGAACTAGATTAGACACGAACACATGCTGACCTGCCAGAAGAGAGCGTGTCATACGCAACTtGACATACCGGAGCCCCTAACGCTGCGCGGATGGACCATGTGACACAAACACCAACTCACACTGCCCCGACCTGTAAGACTTCCCGAAATCTGCCCCCAATTGCGGGAGGCTAGGTCTGGTGCGTGATATGCTCCTAAGGAAAGTCaTCATCGTGGACAAGGCCCAAGCCCCCGaTCCGGCTGGTGCGTATCCCAATGTTCCAGAAAGGAGCGGAGAATTACCTCGGCAGTGACGTATGTATCAGCGATCACAgGTTTTTGTTGAGCGGCCTTGTTTcCAGACGGCCAAAGCCCGTGCAGCGGCGCATTTTGTTTGCCATGCGCGATTGGGTTTGACGGCGGGGGCGAAGCCGGTGAAATCGGCGCGCGTGGTCGGCGAGATTTTGGGTAAATACCATCCGCACGGCGACAGTTCCGCCTATGAGGCGATGGTGCGCATGGCTCAGGATTTTACCTTGCGCTACCCCTTAATcCGACGGCATCGGCAACTTCGGTTCGCGCGACGGCGACGGGGCGGCGGCGATGCGTTACACCGAAGCGCGGCTGACGCCGATTGCGGAATTGCTGTTGTCCGAAATCAATCAGGGGACGGTGGATTTTATGCCCACGTCACCCCATTCTAGTAACTGTGCATCCTAAGAAATGTGCTGTGCCACCTATTAACAGATATTCGGAAATACCTTAACTGAAAGCGAGCATCCCCGGGACATGCCTTATTGCAAACAAGGGTCAAAACTGACTAATATCCTAATGGTCAGTGTTACCAGCTATATCCCCACCTTGATGGTTGACAGGCCGAATCAATGGGACTCGGCTCGCTGGCACCACAACGACTATAAGCGCGATCTCTGGCGACCGAACTCAACAAATCGCTAGGATTGCGGTCAACCCTTAGGGTAGATGCCAATTCTCCAAGTTGCAAGCCGACAACTGATATTCGGTCATGAACTCGGATGTTTCCACTACTTTATTCGGGGGTCTTGTACACGGCTCAGGACCCGCACATGCACCCGGCAGGACTAGCGGCTACCTAGCGTACAATTTGTGCGACTCCCATAGATGCCCTAAGTTACTAGATCCTGTATACGGTAGTTGTATGGAGATATTATCTGTATAGATCGAGAATATCGACAAACTTGTAAGGCCTTAGTCGGCTAAAGGGTCAACCGACAACTAAATACCATCAGCTCGTGCACGGTCGTACCTTTTAAAACGGCAGGCCACATGCCGAAGCTAACTCCTCTCTGATACGCAACCTCTGTCCTGGACCTTGTTGTTGAGTGGCGACAACTAGTAATCTAAGGTAGAGCCGCAGTATCTGTAGCTCGCGGGGATTGGGTAATGCGCATGATGCCTAACGCGGACCAAGCTACAGGGCTAATGCTCTAGATCCTGAAATCTCTAAACACAGCAGAGACACACACCAAACGGGACTTGAGTGATATTAATTATGTTCCGTCGGCGGGTCAAGTGCTGAAAGACATCTAGGCCTGAGGCTACACTAGATGCAATCGTGACTTATATGGTGCTCACACCTGTGCAGCAAACGCCAGTTAGTGAGCCTCCAACGGTGCTATTTATGTGCCACCGCTTGCAGCTCTAGAAATATGTTGAAACGCGGCTGTGCGGGATACACGCTTCCTAGACCATTGGCCGGCATGGTGTTAAATAGACTTTATTGCAACCTAGTCCTCTTAAACGGTATTGCAGATCCAGTCGTGAAGAGGAGTACAACCTGTTATCTCTGTCCGCCTAATCAGGCCGTAAGTGTCAAAGCTATATTGGAGGAGCTTCAGTGGAGACCTTACTCTAGTGTTTAGTGCTAGGGGCTCCCGCGTTACCCCGCCCACCCCGCTCCTCAGCCCAGCGCATGGTCGGAAGAAAGACAGTTCTCTCCAGCAAATGCGCGCCAAAACGAGGCAGCGTACCGGCGGCTGGACATTGTCCAGCGTCTACACTTCCTGTCCTCCCGAGGGTCGAACGGTCGGTTGCAGGTTACCATCTAGCATTAACGCGCCGAGAAGAGTTAAGGCTCCCGCTAAGGCGACCTTGCAGGAGTGGAGGCGCTACTTGATCCCGAAATTGCAGTAACTGACCTGTCAACTGCAATGCACGCCAACACTCTTTCTGCTTA",
                "23S":  "TAGACGGAAAGACCCCGTGAACCTTTACTGTAGCTTTGCATTGGACTTTGAAGTCACTTGTGTAGGATAGGTGGGAGGCTTGGAAGCAGAGACGCCAGTCTCTGTGGAGTCGTCCTTGAAATACCACCCTGGTGTCTTTGAGGTTCTAACCCAGACCCGTCATCCGGGTCGGGGACCGTGCATGGTAGGCAGTTTGACTGGGGCGGTCTCCTCCCAAAGCGTAACGGAGGAGTTCGAAGGTTACCTAGGTCCGGTCGGAAATCGGACTGATAGTGCAATGGCAAAAGGTAGCTTAACTGCGAGACCGACAAGTCGGGCAGGTGCGAAAGCAGGACATAGTGATCCGGTGGTTCTGTATGGAAGGGCCATCGCTCAACGGATAAAAGGTACTCCGGGGATAACAGGCTGATTCCGCCCAAGAGTTCATATCGACGGCGGAGTTTGGCACCTCGATGTCGGCTCATCACATCCTGGGGCTGTAGTCGGCAAGGGTATGGCTGTTCGCCATTTAAAGTGGTACGTGAGCTGGGTTTAAAACGTCGTGAGACAGTTTGGTCCCTATCT",
        }
        cls.max_length_sequences = {
                "penA": "ATGTTGATTAAAAGCGAATATAAGCCCCGGATGCTGCCCAAAGAAGAGCAGGTCAAAAAGCCGATGACCAGTAACGGACGGATTAGCTTCGTCCTGATGGCAATGGCGGTCTTGTTTGCCTGTCTGATTGCCCGCGGGCTGTATCTGCAGACGGTAACGTATAACTTTTTGAAAGAACAGGGCGACAACCGGATTGTGCGGACTCAAGCATTGCCGGCTACACGCGGTACGGTTTCGGACCGGAACGGTGCGGTTTTGGCGTTGAGCGCGCCGACGGAGTCCCTGTTTGCCGTGCCTAAAGATATGAAGGAAATGCCGTCTGCCGCCCAATTGGAACGCCTGTCCGAGCTTGTCGATGTGCCGGTCGATGTTTTGAGGAACAAACTCGAACAGAAAGGCAAGTCGTTTATTTGGATCAAGCGGCAGCTCGATCCCAAGGTTGCCGAAGAGGTCAAAGCCTTGGGTTTGGAAAACTTTGTATTTGAAAAAGAATTAAAACGCCATTACCCGATGGGCAACCTGTTTGCACACGTCATCGGATTTACCGATATTGACGGCAAAGGTCAGGAAGGTTTGGAACTTTCGCTTGAAGACAGCCTGTATGGCGAAGACGGCGCGGAAGTTGTTTTGCGGGACCGGCAGGGCAATATTGTGGACAGCTTGGACTCCCCGCGCAATAAAGCACCGCAAAACGGCAAAGACATCATCCTTTCCCTCGATCAGAGGATTCAGACCTTGGCCTATGAAGAGTTGAACAAGGCGGTCGAATACCATCAGGCAAAAGCCGGAACGGTGGTGGTTTTGGATGCCCGCACGGGGGAAATCCTCGCCTTGGCCAATACGCCCGCCTACGATCCCAACAGACCCGGCCGGGCAGACAGCGAACAGCGGCGCAACCGTGCCGTAACCGATATGATCGAACCTGGTTCGGCAATCAAACCGTTCGTGATTGCGAAGGCATTGGATGCGGGCAAAACCGATTTGAACGAACGGCTGAATACGCAGCCTTATAAAATCGGACCGTCTCCCGTGCGCGATACCCATGTTTACCCCTCTTTGGATGTGCGCGGCATTATGCAGAAATCGTCCAACGTCGGCACAAGCAAACTGTCTGCGCGTTTCGGCGCCGAAGAAATGTATGACTTCTATCATGAATTGGGCATCGGTGTGCGTATGCACTCGGGCTTTCCGGGGGAAACTGCAGGTTTGTTGAGAAATTGGCGCAGGTGGCGGCCCATCGAACAGGCGACGATGTCTTTCGGTTACGGTCTGCAATTGAGCCTGCTGCAATTGGCGCGCGCCTATACCGCACTGACGCACGACGGCGTTTTGCTGCCGCTCAGCTTTGAGAAGCAGGCGGTTGCGCCGCAAGGCAAACGCATATTCAAAGAATCGACCGCGCGCGAGGTACGCAATCTGATGGTTTCCGTAACCGAGCCGGGCGGCACCGGTACGGCGGGTGCGGTGGACGGTTTCGATGTCGGCGCTAAAACCGGCACGGCGCGCAAGTTCGTCAACGGGCGTTATGCCGACAACAAACACGTCGCTACCTTTATCGGTTTTGCCCCCGCCAAAAACCCCCGTGTGATTGTGGCGGTAACCATCGACGAACCGACTGCCCACGGCTATTACGGCGGCGTAGTGGCAGGGCCGCCCTTCAAAAAAATTATGGGCGGCAGCCTGAACATCTTGGGCATTTCCCCGACCAAGCCACTGACCGCCGCAGCCGTCAAAACACCGTCTTAAGCTTTCAGTTTAAGGTGCTAAATCGGCGGACGCTGATTTTTCCGGATCTAAGGTG",
                "mtrR": "TTGCACGGATAAAAAGTCTTTTTTTATAATCCGCCCTCGTCAAACCGACCCGAAACGAAAACGCCATTATGAGAAAAACCAAAACCGAAGCCTTGAAAACCAAAGAACACCTGATGCTTGCCGCCTTGGAAACCTTTTACCGCAAAGGGATTGCCCGCACCTCGCTCAACGAAATCGCCCAAGCCGCCGGCGTAACGCGCGGCGCGCTTTATTGGCATTTCAAAAATAAGGAAGACTTGTTCGACGCGCTGTTCCAACGTATCTGCGACGACATCGAAAACTGCATCGCGCAAGATGCCGCAGATGCCGAAGGAGGGTCTTGGGCGGTATTCCGCCACACGCTGCTGCACTTTTTCGAGCGGCTGCAAAGCAACGACATCTACTACAAATTCCACAACATCCTGTTTTTAAAATGCGAACACACGGAGCAAAACGCCGCCGTTATCGCCATTGCCCGCAAGCATCAGGCAATCTGGCGCGAGAAAATTACCGCCGTTTTGACCGAAGCGGTGGAAAATCAGGATTTGGCTGACGATTTGGACAAGGAAACGGCGGTCATCTTCATCAAATCGACGTTGGACGGGCTGATTTGGCGTTGGTTCTCTTCCGGCGAAAGTTTCGATTTGGGCAAAACCGCCCCCCGCGCATCATCGGGATAATGATGGACAACTTGGAAAACCATCCCTGCCTGCGCCGGAAATAAAATAGCAAGTCGCCTGCACGTACATGGATCGTGTCATCTGCAGTTCCAAATTGG",
                "porB": "aaaaacaccggcgccaacgtcaatgcttgggaatccggcaaatttaccggcaatgtgctgGGGCAGGGCGGGCCTTGACCCTTCTTGTTCGGAGACCAACCACCGCCCCCAACCTGGGGTACGCATATTACGACACTATTACGTTTCCTGGTCTTGCGAACGACGCATATAGCAATCCCCAGTGATTTACTTTCACATGTCTTCGCGTGTTTCTTAACACTATTGCGTGTCAGCCGCCCTGTTCGCGGGGAATCTATGAAACTATGGTTAAGGGCTGTCGCCACCGACCTCTGACCTTCAAAGGGATAGCACACATTCCTGTTTAGAGCATTAACTCCTTTTGACGCAGCTTAGAGTAACTTCTCCCTGATCGCGACCACGAGCGTGTGACTACTCTCTGAGTGATCCGTTAGCCCACACCGATCGGATCGTGATGTCGTTGTCCAATAGATGACCAATCTATCCTAGGGAGCTCTGGTAGATCACCCTCGCTTAATGGAATGCTCGATACTATGCTCTATTTTGCCTGGGAACCTAGAATCAATCATTTGTTTCCACAGTAGTCGCTGACGGTTGATTCCCCAGTATGCTGTCAATAGTCAGGGAGATCAGGTGCCGAAACTAGCAATCCCGTAACCAGGCGTAAAGGGCCACTCTGTGGTAACGGCCCCATCCCGCACTCGTACTCTTCGGACATCTCCTCGTTGTAGCCTAGCCCCATGCACGGGGACCTTATGAATCATCACACACCCAGCCTCCGTGCCATGGAAATGGCGGTCCGCGAGCCTGCATCCAACCCATGGGGCACGTTTAACGGAGCCAGCCACACCTCCAGCAAGACCGGAAGTTAGATTTCGATTCTGTCCGCGCTTATTACTTACGCTGAGCAGCTCTATCTCCTGCGGGGCTAGTATTCGGGGCGCGCGCAACGAACCGATTCTGTCGGGCCATTAAACTGTAAGACTTCAATTGGCTTATTCTGGCAAATTGCGCGATTATGGGTACATCCCACCGCCGCACGACAATAACCTAATCGAGGTCGAAACAACATTGGGGCCATGCATGCAACGAGATTCACCCGTTCCATTAGACTTGTTATGAGGAATCGTTCTATCTCATGAGGACAACGTGGCCCGCGAGTCCACGGAATTCTTATCTATTATGTGACAACAAAGAGCACTCTATTACCTACGTAGATAAACTCGCATGATGGCCGTTCATCTTTATCATTGCACCCTTAGGCTCTCAGTGATACCGGGGCTTGCGAGGACTTCCAACACAAACCTGTCTGTAACTTCCGCGTCTCTTTATCCGAGGTGCTCAAGGAACGTCGTCGGCCTACGGTTCTTAGGAAGTGCATTCTGGCACATACCACCCACAGAAATCGCAGCTCGCAGCGAGGCATTCGTCACGGTTTCTCACCCCCAGGTCGCTCTACACTAGTGCTCTAAAGGGGTTTTTTGCCCGTCCTGTTCGTGAAGCGGGAATACGTTCAGGTCCTGAAATGCGCCGCACGAGCGGACTTTTATATGCTAAGTGCCTTATTACGCAGCAGTCGCAAAGATATGGAAGAACGCCAATCTCGTTCAGAAGCCCTCATGCCCCGTCGGAAAGTGAATTCATGAGCGCTGTTTCGGCGTTCTTCCCAGCTGTGCGTTAGCGTGGGAATGTTGGGCCACGCTATACCCTAGAGGTTGGCGGCGATGGGGGGTCATAAACGAGTGGTCTGATGTTTCATTTTGGACGGCGCCCAGAGACGAGGCGCAAACGGGCAAGTACATTAATGTGCCGCTTAGCTTTA",
                "ponA": "CGCGGTGCGGAAAACTATATCGATTTGAGTAAGAGTGAAGATGTCGAGGAGACTGTCAGCCAGTATCTGTCGGGACTCTATACCGTCGATAAAATGGTTCCCGCCGTTGTGTTGGATGTTACTAAAAAGAAAAATGTCGTCATACAGCTGCCCGGCGGCAGGCGGGTTGCGCTTGACAGGCGCGCCTTGGGTTTTGCGGCCCGAGCGGTCGATAATGAGAAAATGGGGGAGGACCGTATCCGCAGGGGCGCGGTCATCCGTGTCAAAAACAACGGCGGGCGTTGGGCGGTGGTTCAAGAGCCGTTGCTGCAGGGGGCTTTGGTTTCGCTGGATGCAAAAACCGGAGCTGTGCGCGCGCTGGTCGGCGGTTATGATTTTCACAGCAAAACATTCAATCGTGCCGTTCAGGCAATGCGGCAGCCGGGTTCGACCTTTAAGCCGTTTGTCTATTCGGCGGCATTATCTAAGGGGATGACCGCGTCCACAGTGGTTAACGATGCGCCGATTTCCCTGCCGGGGAAAGGGCCGAACGGTTCGGTTTGGACACCTAAAAATTCAGACGGCAGATATTCCGGCTACATTACTTTGAGACAGGCTCTGACGGCTTCCAAGAATATGGTTTCCATCCGTATTTTGATGTCTATCGGTGTCGGTTACGCGCAACAGTATATCCGGCGTTTCGGCTTCAGGCCGTCCGAGCTGCCGGCAAGCCTGTCTATGGCTTTAGGTACGGGCGAGACGACGCCGTTGAAAGTGGCGGAGGCATATAGTGTATTTGCGAACGGCGGATATAGGGTTTCTTCGCACGTGATCGATAAGATTTATGACAGAGACGGCAGGTTGCGCGCCCAAATGCAACCTTTGGTGGCAGGGCAAAATGCGCCTCAGGCAATCGATCCGCGCAATGCCTATATTATGTATAAGATTATGCAGGATGTGGTCCGTGTCGGTACGGCAAGGGGGGCAGCTGCGTTGGGAAGAACGGATATTGCCGGTAAAACGGGTACGACCAACGACAATAAAGATGCGTGGTTTGTCGGTTTTAACCCTGATGTGGTTACTGCCGTATATATCGGCTTCGACAAACCTAAGAGTATGGGGCGTGCCGGCTACGGCGGTACGATTGCGGTGCCGGTTTGGGTGGACTATATGCGTTTTGCGTTGAAAGGAAAGCAGGGCAAAGGGATGAAAATGCCTGAAGGTGTGGTCAGCAGCAATGGCGAATACTATATGAAGGAACGTATGGTAACCGATCCGGGCTTACTAGATCGTGCCGGACAGTGTTTCCGATCAGACGACGGGACGACCGTGTACAGGGTCTGAGCCGATAATCACCGATTAGATGTTGTTCACGTATATCACCATCACTTATGAGTCGAGGCTTGCTATTACACTCTTAGTTTAATCTCTCCCCCTATTGCGTTGGTGGAGCATGCAAATCACGTAGATCCCTTTGTCGCCGCAATAGCCCGCTTCCCGGGAACACCCCGCTGTAACTAGTGTGAGCCCCTCTAGGGTCCAACGAGATCATGAGCTTGTTGAATAATTTAGTCCTCTATTTATATCCGAAGTACAAACGGATATACGAAAAATCTGAAATTCATATTGTGCGTTCAAACATCTGCTCGTGGGGATTGCGCAACGAGGGAGAAAAGTAGCTATGCTCGGTTCTGCTCTTTGCACACAGACAGCGGCCTAGACGGGTCTTGGAGAGTCGTTATCTGCGGGCCATCCTGTGGCTAAAGCTGCGTAGGTCTTGACCAGTGCCATCTTCTAGTAGTATCTGCGGGCTTCCAAGCTCGAGGGCGGGACCTGGTCTCACTTTCCAGTACGCAACACTCGCCGCCTTCCGGTTCAAGAGGAGCCGGGGCAGGGGACAACTATATACTCCTCAACACAACGACTATAATGCCAATTGTATCACCGTGAAATTCTCGACTCCAGATACTCAAGCTACAGCATCAGCGTGACAACGACATGTTTTTGAGCTCTCGACGGCAACCCGAGTCGCCTGAGCACGAATACCAGGAGTCTGTAACGACGCTTGCGTCAATTTGAACTAACTGTGGCCCTCTTTGTATGTAAGTTTCGTCTGAGTCTGTACCTTAGGGACAAGCCATTACAACCCTCTCTGGAGTTCGCTGGCTGCATCGGATTCGTTGGGGACGCGTCAGGAGGCTGCGCTCATTTAGTTTAGTTGCTGCGGAAATACACTGAGTTCATAATGTTATCGGACTGTTCGTTTTTCAGTTCTGCGTTTAATGTATCCGGTCACAGATAAAGAAGGCGGGAATGTAGTTTGGCG",
                "gyrA": "ctgtacgcgatgcacgagctgaaaaataactggaatgccgcctacaaaaaatcggcgcgcatcgtcggcgacgtcatcggtaaataccacccccacggcgattccgcagtttacgacaccatcgtccgtatggcgcaaaatttcgctatgcgttatgtgctgatagacggacagggcaacttcggatcggtggacgggcttgccgccgcagccatgcgctataccgaaatccgcatggcgaaaatctcacatgaaatgctggcaCCAACTCTAACATAACGATCTTTTACCGACGACGCGTGTAGGCAGGACATGCAGTGGCTGTAAGTTACAGCTGCCTATAATCTTGAATACTACGCATCCTTTTATTGAAATCTGCCCTAAGGCTCACGCACCACGAAGTCCCTGTAGCTGTGAAAATCATCTAGTCCCTTCGGGACCGGGAGAGACTGATTTCCCTTACGAAAGT",
                "parC": "GTTTCAGACGGCCAAAAGCCCGTGCAGCGGCGCATTTTGTTTGCCATGCGCGATATGGGTTTGACGGCGGGGGCGAAGCCGGTGAAATCGGCGCGCGTGGTCGGCGAGATTTTGGGTAAATACCATCCGCACGGCGACAGTTCCGCCTATGAGGCGATGGTGCGCATGGCTCAGGATTTTACCTTGCGCTACCCCTTAATCGACGGCATCGGCAACTTCGGTTCGCGCGACGGCGACGGGGCGGCGGCGATGCGTTACACCGAAGCGCGGCTGACGCCGATTGCGGAATTGCTGTTGTCCGAAATCAATCAGGGGACGGTGGATTTTATGCCCGGCTCGAAGTGCGAAGAACCACATACCACCACTCACTAGCAAGACTTAGGGTCGTTTCAAACATTGTAGTCCGTCGGACTTGTCTGCTGATAGGGAGCCTTGCTAGCCCAAGGCGCTAAAACCTCAATTGTTTATCGTAACGAGGAGTCTTCGTTCGGTGAGCTTGCCTTTAGGTGCAATACTGGCCTAGACGTGACCTGGTAGGGAACTGTGGTGTACTTTCGTTCGTAACCAGACGTAATTTCGCGAGACCCTGCCACGTTAATGGCCTCCAACAACCAAATCAATGAATGTCGAGACGGATATTCTGTGGCCTTGAACACTACCTCTTTCTTGTTCGTGCTGCGGCTTCCTTACCTTCCTTGCGAACCAAACCCAGACGCAGGTATTCTGATGGGACCCTATGGAGGTGTCACCCGGAGCTCCGTTAGTCCCTGTTGAGGCACCCGCCAGCTTACCCTGTCTCCCCTTACTTAGCCGGTAACTAAACATAGAAGACTAGACCATAAAAGTAATTATCCGACCGCCGCTGGCAGGGACCACGTCGGTAAAGTCCTACCGGAACTTATGTAACTACCAGCTGTAGCTCTCGTTAGCGGGTCCGATCAACACACCATGATTTCTTCATCGTCGAAGGTTGCGCGCGTTTATGAAAGCGCGGTGCTGTAGCGTGACTATTTAGTGCTAGAAACACAGAATAGTCATCAGCCTCCGATTAAGGCGTGCCTGAGTCGGCATCGGGGAGGCTTCCCAGGAGAGATTAGTGCCCTTTGACGGAGACGCAGAATTATCGGTGGCTTAAAGTAGGAAGCTAGAACGGTGGGGAGGCTCCGGGAATAGCTCGCGTAGTGCGCAGGGATAGATAGCTGAAGCATAGGAATTCCCCCAATAAAGGGGCCCTGTAGGCCGTGTAGACTCACGTGGAAGCCACCTTCCTCAGGGCACGGTGTATCGTGACTTTATCGCGGAGAAGCCGAGCCAACCAGATTTAATGGGCTACTACCCGTACATTCCTAGTCGGTTGTAGGCGATGTTAGAGTGTCGACCAGTGTATCATTACTCAAGACTAAATACTAACCGTTAAACAGTGCGATGGTAAGGTATCTCAAATCGAGCTCTTACCCAGAGAGCGACGGTTGCTCAAAACCAATCCTCCCGAACAGGCGTATAGTTCATATTCTTCCTCAATAATGAGGTAGCACACTTCATGCGCGATTAGCTACCCAGATTCCTACAGTCCTACACGCAACTCGTAAATTTCCATGGAGACGTCCATGGTCACGAATAAAAAATTAGGCACTACTGGAGCGGCAGGACCGATCCTCCCTCTACGGCTAGATATATGAAGCTTATTCGGTATTTTGTCCAGTTTTCATGACACGTTTTGCGTTGGTGCCGGAGAGCCCCCAGGAAATGGAGAGGCAGCCTCCATCCGTCTGGGGTCGGGCTAATGTAGCGAAAGAACTCTCGTCCACCATGGTCGCTTGCATCGCTCTAGTATCGCACCGTTAGTCTCCCAATTATGCTGTTCGTCGGTATCGAAGGGACGGGGTACTGCAGCCCGCGATTAAGGTTCCCATGACGCTAGCGCTAGTACAGGCCTGGAGAGCATTAAAAAGCGTGAGCTACACGCGGAAAGTAATGGCACAGCCTCTTCATCCCCCAGCCAATCTGTAACCGTGCATTAGTCAATACTGGTGTAGAACACTTAGAACGAGTTTCTCCCCGGGCGTATTATGAGCTAACGCAACGCCTGTGTACACCATACCCGATAGCAGGTAATCCGCACAGGGGTCCAGTCCAAGCACGATGCGATCGCCCGCAAGAGACTCGGTGTTCCAGGATAGCTAGTCGCGAAGCGGCGTGCGATATATACAGACGATAAGGATACGGCTCCGTACGTAAATTCTATCAGCTGTTCCGTCACTCGGATAGGACACTTTGCTCGCTGATTCAGCTCAGAGCCCCACGCCGTCAGCAAACAGGGCGGATAGGGCATATGCCATTAGGGTGTTTAAGC",
                "23S": "TAGACGGAAAGACCCCGTGAACCTTTACTGTAGCTTTGCATTGGACTTTGAAGTCACTTGTGTAGGATAGGTGGGAGGCTTGGAAGCAGAGACGCCAGTCTCTGTGGAGTCGTCCTTGAAATACCACCCTGGTGTCTTTGAGGTTCTAACCCAGACCCGTCATCCGGGTCGGGGACCGTGCATGGTAGGCAGTTTGACTGGGGCGGTCTCCTCCCAAAGCGTAACGGAGGAGTTCGAAGGTTACCTAGGTCCGGTCGGAAATCGGACTGATAGTGCAATGGCAAAAGGTAGCTTAACTGCGAGACCGACAAGTCGGGCAGGTGCGAAAGCAGGACATAGTGATCCGGTGGTTCTGTATGGAAGGGCCATCGCTCAACGGATAAAAGGTACTCCGGGGATAACAGGCTGATTCCGCCCAAGAGTTCATATCGACGGCGGAGTTTGGCACCTCGATGTCGGCTCATCACATCCTGGGGCTGTAGTCGGTCCCAAGGGTATGGCTGTTCGCCATTTAAAGTGGTACGTGAGCTGGGTTTAAAACGTCGTGAGACAGTTTGGTCCCTATCT"
        }


        if not cls.DRIVER:
            if constants.USE_CHROME_DRIVER:
                cls.driver = webdriver.Chrome(executable_path=constants.DRIVER_PATH)
            else:
                cls.driver = webdriver.Firefox()

            cls.driver.implicitly_wait(constants.IMPLICIT_WAIT)
            cls.driver.set_window_size(1024, 768)
        else:
            cls.driver = cls.DRIVER


    def setUp(self):
        self.populateDB()

    def signIn(self):

        METHOD_NAME = "signIn"

        driver = self.driver
        test_number = 1

        test_input = ("test01", "Mypass1!")
        username = test_input[0]
        password = test_input[1]


        cookies = driver.get_cookies()

        lang_selected = False
        eula_accepted = False

        for cookie in cookies:
            if cookie['name'] == 'ngstar_eula_acceptance':
                eula_accepted = True
            if cookie['name'] == 'ngstar_lang_pref':
                lang_selected = True

        if lang_selected == False:
            driver.get(constants.WELCOME_URL)
            element = driver.find_element_by_id("btn-en")
            element.click()

            element = driver.find_element_by_id("launch-ngstar")
            element.click()

        if eula_accepted == False:
            element = driver.find_element_by_id("eula_accept")
            element.click()

        # click Sign In button
        driver.get(constants.HOME_URL)
        msg = "Test #{0} in {1} in {2} with [Input: {3}]: " \
            "Could not find [{4}] button".format(test_number,
                                                 CLASS_NAME,
                                                 METHOD_NAME,
                                                 test_input,
                                                 self.SIGN_IN_BTN_NAME)
        self.assertIn(self.SIGN_IN_BTN_NAME, driver.page_source, msg)
        element = driver.find_element_by_link_text(self.SIGN_IN_BTN_NAME)
        element.click()
        test_number = test_number + 1

        # input username and password on Sign In page
        element = driver.find_element_by_id(self.USERNAME_TEXTBOX_ID)
        element.send_keys(username)
        element = driver.find_element_by_id(self.PASSWORD_TEXTBOX_ID)
        element.send_keys(password)
        element.submit()

        # logout
        msg = "Test #{0} in {1} in {2} with [Input: {3}]: " \
            "Could not find [{4}] button".format(test_number,
                                                 CLASS_NAME,
                                                 METHOD_NAME,
                                                 test_input,
                                                 self.SIGN_OUT_BTN_NAME)
        self.assertIn(self.SIGN_OUT_BTN_NAME, driver.page_source, msg)
        test_number = test_number + 1

    def signOut(self):

        METHOD_NAME = "signOut"

        driver = self.driver
        test_number = 1

        test_input = ("test01", "Mypass1!")


        driver.get(constants.HOME_URL)
        msg = "Test #{0} in {1} in {2} with [Input: {3}]: " \
            "Could not find [{4}] button".format(test_number,
                                                 CLASS_NAME,
                                                 METHOD_NAME,
                                                 test_input,
                                                 self.SIGN_OUT_BTN_NAME)
        self.assertIn(self.SIGN_OUT_BTN_NAME, driver.page_source, msg)
        element = driver.find_element_by_link_text(self.SIGN_OUT_BTN_NAME)
        element.click()
        test_number = test_number + 1

    # running test suite is terminated if an assert is thrown (if an assert is
    # thrown in populateDB, or any other method, tests won't continue which is
    # what we want)
    def populateDB(self):

        driver = self.driver

        self.signIn()


        for loci_name in self.loci_names:

            allele_type = self.allele_types_populate_db[loci_name]
            sequence = self.sequences[loci_name]
            driver.get(constants.ADD_ALLELE_URL)

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            element = driver.find_element_by_xpath('//*[@id="select2-loci_name_option-container"]')
            element.click()
            element = driver.find_element_by_xpath('/html/body/span/span/span[1]/input')
            element.click()
            element.send_keys(loci_name)
            element.send_keys(Keys.RETURN)


            element = driver.find_element_by_id(self.ADD_ALLELE_TYPE_TEXTBOX_ID)
            element.send_keys(allele_type)
            script = "var $item = window.jQuery('#" + self.ADD_ALLELE_SEQ_TEXTBOX_ID + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)
            element = driver.find_element_by_id(self.SUBMIT_BTN_ID)
            element.click()

            element = driver.find_element_by_id(self.ALLELE_LIST_ALERT_ID)
            self.assertIn(self.ADD_ALLELE_SUCCESS_MSG, element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[1]")
            self.assertIn(allele_type, element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
            self.assertIn(loci_name, element.text)

        self.signOut()

    def test_full_gene_match_cases(self):

        driver = self.driver

        driver.get(constants.ALLELE_QUERY_URL)

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.full_gene_sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["mtrR"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_full_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_full_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_full_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_full_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn(self.submitted_seq_full_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn(self.db_full_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn(self.submitted_seq_full_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn(self.db_full_match["parC"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[5]")
        self.assertIn(self.submitted_seq_full_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[6]")
        self.assertIn(self.db_full_match["23S"], element.text)

    def test_full_gene_partial_match_cases(self):

        driver = self.driver

        driver.get(constants.ALLELE_QUERY_URL)

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.full_gene_partial_sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("0.000", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("1744 / 1748 (99.77%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("1744 / 1748 (99.77%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("1", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("703 / 708 (99.29%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("703 / 708 (99.29%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("2", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("28 / 28 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("28 / 30 (93.33%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn("3", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn("75 / 76 (98.68%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn("75 / 76 (98.68%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn("4", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn("264 / 270 (97.78%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn("264 / 270 (97.78%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn("5", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn("330 / 334 (98.80%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn("330 / 334 (98.80%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[3]")
        self.assertIn("6", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[5]")
        self.assertIn("564 / 567 (99.47%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[6]")
        self.assertIn("564 / 567 (99.47%)", element.text)

    def test_full_match_cases(self):

        driver = self.driver

        driver.get(constants.ALLELE_QUERY_URL)

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["mtrR"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_full_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_full_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_full_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_full_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn(self.submitted_seq_full_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn(self.db_full_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn(self.submitted_seq_full_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn(self.db_full_match["parC"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[5]")
        self.assertIn(self.submitted_seq_full_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[6]")
        self.assertIn(self.db_full_match["23S"], element.text)

    def test_max_length_cases(self):

        driver = self.driver

        driver.get(constants.ALLELE_QUERY_URL)

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.max_length_sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("0.000", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("1746 / 1746 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("1746 / 1746 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("1", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("703 / 703 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("703 / 703 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("2", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("30 / 30 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("30 / 30 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn("3", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn("75 / 75 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn("75 / 75 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn("4", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn("264 / 264 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn("264 / 264 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn("5", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn("332 / 332 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn("332 / 332 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[3]")
        self.assertIn("6", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[5]")
        self.assertIn("567 / 567 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[6]")
        self.assertIn("567 / 567 (100.00%)", element.text)

    def test_mixed_match_cases(self):

        driver = self.driver


        driver.get(constants.ALLELE_QUERY_URL)

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.mixed_sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("0.000", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("1681 / 1681 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("1681 / 1746 (96.28%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("2", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("30 / 30 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("30 / 30 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn("3", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn("75 / 76 (98.68%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn("75 / 76 (98.68%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn("5", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn("332 / 332 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn("332 / 332 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[6]")
        self.assertIn("--", element.text)

    def test_no_input_cases(self):

        driver = self.driver

        driver.get(constants.ALLELE_QUERY_URL)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = WebDriverWait(driver, 60).until(
            EC.presence_of_element_located((By.ID, self.ERROR_MODAL_ID))
        )

        self.assertIn(self.NO_SEQS_ENTERED, element.text)

    def test_no_match_cases(self):

        driver = self.driver
        driver.get(constants.ALLELE_QUERY_URL)

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.random_sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[6]")
        self.assertIn("--", element.text)

    def test_partial_match_cases(self):

        driver = self.driver


        driver.get(constants.ALLELE_QUERY_URL)

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.partial_sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_partial_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_partial_match["mtrR"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_partial_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_partial_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn(self.db_partial_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn(self.db_partial_match["parC"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[6]")
        self.assertIn(self.db_partial_match["23S"], element.text)

    def test_primer_cases(self):

        driver = self.driver


        driver.get(constants.ALLELE_QUERY_URL)

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.primer_sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("0.000", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("1746 / 1746 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("1746 / 1746 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("1", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("703 / 703 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("703 / 703 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("2", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("30 / 30 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("30 / 30 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn("3", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn("75 / 75 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn("75 / 75 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn("4", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn("264 / 264 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn("264 / 264 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn("5", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn("332 / 332 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn("332 / 332 (100.00%)", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[3]")
        self.assertIn("6", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[5]")
        self.assertIn("567 / 567 (100.00%)", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[7]/td[6]")
        self.assertIn("567 / 567 (100.00%)", element.text)

    def test_sampling_full_cases(self):

        driver = self.driver


        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["penA", "gyrA", "23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_full_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_full_match["23S"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["mtrR", "porB", "parC"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["mtrR"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_full_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_full_match["parC"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["porB", "ponA"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["ponA"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["penA", "mtrR", "ponA", "gyrA", "parC","23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["mtrR"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_full_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_full_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_full_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_full_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn(self.submitted_seq_full_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn(self.db_full_match["parC"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn(self.submitted_seq_full_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn(self.db_full_match["23S"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["gyrA", "parC"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["parC"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["mtrR", "porB", "ponA", "gyrA", "parC", "23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["mtrR"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_full_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_full_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_full_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_full_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn(self.submitted_seq_full_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn(self.db_full_match["parC"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn(self.submitted_seq_full_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn(self.db_full_match["23S"], element.text)

    def test_sampling_mixed_cases(self):

        driver = self.driver


        driver.get(constants.ALLELE_QUERY_URL)
        test_seq = {}
        test_seq["penA"] = self.sequences["penA"]
        test_seq["mtrR"] = self.random_sequences["mtrR"]
        loci_names = ["penA", "mtrR"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = test_seq[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("--", element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        test_seq = {}
        test_seq["penA"] = self.sequences["penA"]
        test_seq["mtrR"] = self.random_sequences["mtrR"]
        test_seq["porB"] = self.random_sequences["porB"]
        test_seq["ponA"] = self.partial_sequences["ponA"]
        test_seq["parC"] = self.primer_sequences["parC"]
        test_seq["23S"] = self.sequences["23S"]
        loci_names = ["penA", "mtrR", "porB", "ponA", "parC", "23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = test_seq[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_full_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_full_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_partial_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn(self.submitted_seq_full_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn(self.db_full_match["parC"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn(self.submitted_seq_full_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn(self.db_full_match["23S"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        test_seq = {}
        test_seq["mtrR"] = self.partial_sequences["mtrR"]
        test_seq["porB"] = self.full_gene_sequences["porB"]
        test_seq["ponA"] = self.primer_sequences["ponA"]
        test_seq["gyrA"] = self.partial_sequences["gyrA"]
        test_seq["parC"] = self.random_sequences["parC"]
        test_seq["23S"] = self.partial_sequences["23S"]
        loci_names = ["mtrR", "porB", "ponA", "gyrA", "parC", "23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = test_seq[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                      window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_partial_match["mtrR"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_full_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_full_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_partial_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn(self.db_partial_match["23S"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        test_seq = {}
        test_seq["mtrR"] = self.random_sequences["mtrR"]
        test_seq["ponA"] = self.primer_sequences["ponA"]
        test_seq["parC"] = self.primer_sequences["parC"]
        test_seq["23S"] = self.primer_sequences["23S"]
        loci_names = ["mtrR", "ponA", "parC", "23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = test_seq[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_full_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_full_match["parC"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_full_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_full_match["23S"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        test_seq = {}
        test_seq["penA"] = self.partial_sequences["penA"]
        test_seq["porB"] = self.sequences["porB"]
        test_seq["ponA"] = self.partial_sequences["ponA"]
        loci_names = ["penA", "porB", "ponA"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = test_seq[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_partial_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Full", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_full_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_full_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_partial_match["ponA"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        test_seq = {}
        test_seq["gyrA"] = self.random_sequences["gyrA"]
        test_seq["parC"] = self.partial_sequences["parC"]
        loci_names = ["gyrA", "parC"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = test_seq[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_partial_match["parC"], element.text)

    def test_sampling_no_match_cases(self):

        driver = self.driver

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["mtrR", "porB", "23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.random_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("--", element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["mtrR", "ponA", "gyrA"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.random_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("--", element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["penA", "mtrR", "porB", "gyrA", "parC", "23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.random_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[6]/td[6]")
        self.assertIn("--", element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["penA", "parC"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.random_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("--", element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["porB", "ponA", "parC"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.random_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn("--", element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn("Not found", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn("--", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn("--", element.text)

    def test_sampling_partial_cases(self):

        driver = self.driver

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["penA", "mtrR"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.partial_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_partial_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_partial_match["mtrR"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["gyrA", "parC", "23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.partial_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_partial_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_partial_match["parC"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_partial_match["23S"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["penA", "porB", "ponA", "gyrA", "parC"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.partial_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("penA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["penA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_partial_match["penA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_partial_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_partial_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_partial_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[5]/td[6]")
        self.assertIn(self.db_partial_match["parC"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["mtrR", "porB", "ponA", "23S"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.partial_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("mtrR", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["mtrR"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_partial_match["mtrR"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("porB", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["porB"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_partial_match["porB"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_partial_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
        self.assertIn("23S", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[3]")
        self.assertIn(self.allele_types_populate_db["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["23S"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[4]/td[6]")
        self.assertIn(self.db_partial_match["23S"], element.text)

        driver.get(constants.ALLELE_QUERY_URL)
        loci_names = ["ponA", "gyrA", "parC"]

        for loci_name in loci_names:
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[loci_name]
            sequence = self.partial_sequences[loci_name]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

        element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
        element.click()

        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
        self.assertIn("ponA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
        self.assertIn(self.allele_types_populate_db["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["ponA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
        self.assertIn(self.db_partial_match["ponA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
        self.assertIn("gyrA", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[3]")
        self.assertIn(self.allele_types_populate_db["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["gyrA"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[2]/td[6]")
        self.assertIn(self.db_partial_match["gyrA"], element.text)

        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[2]")
        self.assertIn("parC", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[3]")
        self.assertIn(self.allele_types_populate_db["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[4]")
        self.assertIn("Partial", element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[5]")
        self.assertIn(self.submitted_seq_partial_match["parC"], element.text)
        element = driver.find_element_by_xpath("//table/tbody/tr[3]/td[6]")
        self.assertIn(self.db_partial_match["parC"], element.text)

    def test_single_full_cases(self):

        driver = self.driver

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:

            driver.get(constants.ALLELE_QUERY_URL)
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

            element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
            element.click()

            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
            self.assertIn(key, element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
            self.assertIn(self.allele_types_populate_db[key], element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
            self.assertIn("Full", element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
            self.assertIn(self.submitted_seq_full_match[key], element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
            self.assertIn(self.db_full_match[key], element.text)

    def test_single_no_match_cases(self):

        driver = self.driver

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:

            driver.get(constants.ALLELE_QUERY_URL)
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.random_sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

            element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
            element.click()

            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
            self.assertIn(key, element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
            self.assertIn("Not found", element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
            self.assertIn("--", element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
            self.assertIn("--", element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
            self.assertIn("--", element.text)

    def test_single_partial_cases(self):

        driver = self.driver

        for key in self.ALLELE_QUERY_TEXTBOX_IDS:

            driver.get(constants.ALLELE_QUERY_URL)
            textbox_id = self.ALLELE_QUERY_TEXTBOX_IDS[key]
            sequence = self.partial_sequences[key]

            WebDriverWait(driver, 10).until(lambda driver: driver.execute_script("return window.jQuery && window.jQuery.active === 0;"))


            script = "var $item = window.jQuery('#" + textbox_id + "'); \
                            window.jQuery($item).val('" + sequence + "');"
            driver.execute_script(script)

            element = driver.find_element_by_css_selector(self.ALLELE_QUERY_SUBMIT_BTN_CSS_SEL)
            element.click()

            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[2]")
            self.assertIn(key, element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[3]")
            self.assertIn(self.allele_types_populate_db[key], element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[4]")
            self.assertIn("Partial", element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[5]")
            self.assertIn(self.submitted_seq_partial_match[key], element.text)
            element = driver.find_element_by_xpath("//table/tbody/tr[1]/td[6]")
            self.assertIn(self.db_partial_match[key], element.text)

    def clearDB(self):

        driver = self.driver

        try:

        	conn = pymysql.connect(host=constants.DB_HOST, user=constants.DB_USERNAME, passwd=constants.DB_PASSWORD, db=constants.NGSTAR_DB_NAME)
        	cur = conn.cursor()

        except:

        	print "No connection"

        cur.execute("DELETE FROM tbl_Allele")
        conn.commit()

        cur.execute("DELETE FROM tbl_Metadata_MIC")
        conn.commit()

        cur.execute("DELETE FROM tbl_Metadata_IsolateClassification")
        conn.commit()

        cur.execute("DELETE FROM tbl_Metadata")
        conn.commit()

        cur.close()
        conn.close()

    def tearDown(self):
        self.clearDB()


    @classmethod
    def tearDownClass(cls):
        if not cls.DRIVER:
            cls.driver.close()

if __name__ == '__main__':
    unittest.main()
